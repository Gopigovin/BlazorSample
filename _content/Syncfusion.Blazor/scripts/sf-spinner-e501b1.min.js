(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-spinner"],{

/***/ "./bundles/sf-spinner.js":
/*!*******************************!*\
  !*** ./bundles/sf-spinner.js ***!
  \*******************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_spinner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-spinner.js */ "./modules/sf-spinner.js");
/* harmony import */ var _modules_sf_spinner_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_spinner_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-spinner.js":
/*!*******************************!*\
  !*** ./modules/sf-spinner.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.Spinner = function () {
  'use strict';

  var SfSpinner =
  /** @class */
  function () {
    function SfSpinner(element, target, dotnetRef) {
      this.element = element;
      this.dotNetRef = dotnetRef;
      this.updateContext(target);
      this.element.blazor__instance = this;
    }

    SfSpinner.prototype.initialize = function (element, target) {
      this.appendTarget(target);
      var theme = window.getComputedStyle(element, ':after').getPropertyValue('content');
      return theme.replace(/['"]+/g, '');
    };

    SfSpinner.prototype.appendTarget = function (target) {
      if (!sf.base.isNullOrUndefined(target)) {
        var targetElement = document.querySelector(target);
        targetElement.appendChild(this.element);
      }
    };

    SfSpinner.prototype.updateContext = function (target) {
      sf.base.extend(this, this, target);
    };

    return SfSpinner;
  }(); // tslint:disable-next-line


  var Spinner = {
    initialize: function initialize(element, target, dotnetRef) {
      new SfSpinner(element, target, dotnetRef);
      return !sf.base.isNullOrUndefined(element) ? element.blazor__instance.initialize(element, target) : null;
    },
    updateTarget: function updateTarget(element, target) {
      if (!sf.base.isNullOrUndefined(element)) {
        return element.blazor__instance.appendTarget(target);
      }
    }
  };
  return Spinner;
}();

/***/ })

}]);