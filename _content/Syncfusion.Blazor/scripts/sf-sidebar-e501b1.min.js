(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-sidebar"],{

/***/ "./bundles/sf-sidebar.js":
/*!*******************************!*\
  !*** ./bundles/sf-sidebar.js ***!
  \*******************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_sidebar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-sidebar.js */ "./modules/sf-sidebar.js");
/* harmony import */ var _modules_sf_sidebar_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_sidebar_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-sidebar.js":
/*!*******************************!*\
  !*** ./modules/sf-sidebar.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.Sidebar = function () {
  'use strict';

  var CLOSE = 'e-close';
  var OPEN = 'e-open';
  var CONTEXTBACKDROP = 'e-backdrop';
  var DEFAULTBACKDROP = 'e-sidebar-overlay';
  var SIDEBARABSOLUTE = 'e-sidebar-absolute';
  var CONTEXT = 'e-sidebar-context';
  var ROOT = 'e-sidebar';
  var PUSH = 'Push';
  var OVER = 'Over';
  var SLIDE = 'Slide';
  var AUTO = 'Auto';
  var CONTROL = 'e-control';
  var MAINCONTENTANIMATION = 'e-content-animation';

  var SfSidebar =
  /** @class */
  function () {
    // tslint:disable
    function SfSidebar(element, dotnetRef, property) {
      this.enableGestures = true;
      this.isOpen = false;
      this.closeOnDocumentClick = false;
      this.isDevice = false;
      this.dockSize = 'auto';
      this.width = 'auto';
      this.element = element;
      this.element.blazor__instance = this;
      this.dotnetRef = dotnetRef;
      this.types = property.Type;
      this.position = property.Position;
      this.enableDock = property.EnableDock;
      this.showBackdrop = property.ShowBackdrop;
      this.target = property.Target;
      this.enableGestures = property.EnableGestures;
      this.closeOnDocumentClick = property.CloseOnDocumentClick;
      this.mediaQuery = property.MediaQuery;
      this.dockSize = property.DockSize;
      this.width = property.Width;
    } // tslint:enable


    SfSidebar.prototype.initialize = function () {
      this.setTarget();
      this.addClass();
      this.setType();
      this.setCloseOnDocumentClick();
      this.setMediaQuery();

      if (sf.base.Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }

      this.wireEvents();
    };

    SfSidebar.prototype.getState = function () {
      return this.element.classList.contains(OPEN);
    };

    SfSidebar.prototype.addClass = function () {
      var classELement = document.querySelector('.e-main-content');

      if (!sf.base.isNullOrUndefined(classELement || this.targetEle)) {
        sf.base.addClass([classELement || this.targetEle], [MAINCONTENTANIMATION]);
      }
    };

    SfSidebar.prototype.setTarget = function () {
      this.targetEle = this.element.nextElementSibling;
      this.sidebarEleCopy = this.element.cloneNode(true);

      if (typeof this.target === 'string') {
        this.target = document.querySelector(this.target);
      }

      if (this.target) {
        this.target.insertBefore(this.element, this.target.children[0]);
        sf.base.addClass([this.element], SIDEBARABSOLUTE);
        sf.base.addClass([this.target], CONTEXT);
        this.targetEle = this.getTargetElement();
      }
    }; // tslint:disable


    SfSidebar.prototype.changeTarget = function (property) {
      // tslint:enable
      var newTarget;
      var sibling = document.querySelector('.e-main-content') || this.targetEle;

      if (typeof property.Target === 'string') {
        newTarget = document.querySelector(property.Target);
      }

      if (!sf.base.isNullOrUndefined(newTarget)) {
        if (sibling) {
          sibling.style.marginLeft = '0px';
          sibling.style.marginRight = '0px';
        }

        document.body.insertAdjacentElement('afterbegin', this.element);
        this.target = newTarget;
        this.initialize();
      }
    };

    SfSidebar.prototype.getTargetElement = function () {
      var siblingElement = this.element.nextElementSibling;

      while (!sf.base.isNullOrUndefined(siblingElement)) {
        if (!siblingElement.classList.contains(ROOT)) {
          break;
        }

        siblingElement = siblingElement.nextElementSibling;
      }

      return siblingElement;
    };

    SfSidebar.prototype.hide = function (e) {
      var _this = this;

      var left = 'Left';
      var sibling = document.querySelector('.e-main-content') || this.targetEle;

      if (!this.enableDock && sibling) {
        sibling.style.transform = 'translateX(' + 0 + 'px)';
        this.position === left ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';
      }

      this.destroyBackDrop();
      this.isOpen = false;

      if (this.enableDock) {
        setTimeout(function () {
          return _this.setTimeOut();
        }, 50);
      }

      sf.base.EventHandler.add(this.element, 'transitionend', this.transitionEnd, this);
    };

    SfSidebar.prototype.show = function (e) {
      this.isOpen = true;
      sf.base.EventHandler.add(this.element, 'transitionend', this.transitionEnd, this);
    };

    SfSidebar.prototype.transitionEnd = function (e) {
      this.dotnetRef.invokeMethodAsync('SetDock');

      if (!sf.base.isNullOrUndefined(e) && e.target === this.element) {
        this.dotnetRef.invokeMethodAsync('TriggerChange');
      }

      sf.base.EventHandler.remove(this.element, 'transitionend', this.transitionEnd);
    }; // tslint:disable


    SfSidebar.prototype.createBackDrop = function (element, dotnetRef, property) {
      if (property) {
        this.target = property.Target;
        this.showBackdrop = property.ShowBackdrop;
      }

      if (this.target && this.showBackdrop && this.getState()) {
        var sibling = document.querySelector('.e-main-content') || this.targetEle;
        sf.base.addClass([sibling], CONTEXTBACKDROP);
      } else if (this.showBackdrop && !this.modal && this.getState()) {
        this.modal = sf.base.createElement('div');
        this.modal.className = DEFAULTBACKDROP;
        this.modal.style.display = 'block';
        document.body.appendChild(this.modal);
      }

      this.show();
    }; // tslint:enable


    SfSidebar.prototype.destroyBackDrop = function () {
      var sibling = document.querySelector('.e-main-content') || this.targetEle;

      if (this.target && this.showBackdrop && sibling) {
        sf.base.removeClass([sibling], CONTEXTBACKDROP);
      } else if (this.showBackdrop && this.modal) {
        this.modal.style.display = 'none';
        this.modal.outerHTML = '';
        this.modal = null;
      }
    };

    SfSidebar.prototype.enableGestureHandler = function (args) {
      if (!this.isOpen && this.position === 'Left' && args.swipeDirection === 'Right' && args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {
        this.dotnetRef.invokeMethodAsync('Show', null);
        this.show();
      } else if (this.isOpen && this.position === 'Left' && args.swipeDirection === 'Left') {
        this.dotnetRef.invokeMethodAsync('Hide', null);
        this.hide();
      } else if (this.isOpen && this.position === 'Right' && args.swipeDirection === 'Right') {
        this.dotnetRef.invokeMethodAsync('Hide', null);
        this.hide();
      } else if (!this.isOpen && this.position === 'Right' && args.swipeDirection === 'Left' && window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {
        this.dotnetRef.invokeMethodAsync('Show', null);
        this.show();
      }
    };

    SfSidebar.prototype.resize = function (e) {
      this.setMediaQuery();

      if (sf.base.Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    }; // tslint:disable


    SfSidebar.prototype.setEnableGestures = function (property) {
      // tslint:enable
      if (property) {
        this.isOpen = property.IsOpen;
        this.position = property.Position;
      }

      if (this.enableGestures) {
        this.mainContentEle = new sf.base.Touch(document.body, {
          swipe: this.enableGestureHandler.bind(this)
        });
        this.sidebarEle = new sf.base.Touch(this.element, {
          swipe: this.enableGestureHandler.bind(this)
        });
      } else {
        if (this.mainContentEle && this.sidebarEle) {
          this.mainContentEle.destroy();
          this.sidebarEle.destroy();
        }
      }
    };

    SfSidebar.prototype.wireEvents = function () {
      this.setEnableGestures();
      window.addEventListener('resize', this.resize.bind(this));
    };

    SfSidebar.prototype.unWireEvents = function () {
      window.removeEventListener('resize', this.resize.bind(this));
      sf.base.EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);

      if (this.mainContentEle) {
        this.mainContentEle.destroy();
      }

      if (this.sidebarEle) {
        this.sidebarEle.destroy();
      }
    };

    SfSidebar.prototype.documentclickHandler = function (e) {
      if (sf.base.closest(e.target, '.' + CONTROL + '' + '.' + ROOT)) {
        return;
      }

      this.dotnetRef.invokeMethodAsync('Hide', e);
      this.hide(e);
    }; // tslint:disable


    SfSidebar.prototype.setCloseOnDocumentClick = function (property) {
      // tslint:enable
      if (property) {
        this.closeOnDocumentClick = property.CloseOnDocumentClick;
      }

      if (this.closeOnDocumentClick) {
        sf.base.EventHandler.add(document, 'mousedown touchstart', this.documentclickHandler, this);
      } else {
        sf.base.EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);
      }
    };

    SfSidebar.prototype.setMediaQuery = function () {
      if (this.mediaQuery) {
        var media = false;

        if (typeof this.mediaQuery === 'string') {
          media = window.matchMedia(this.mediaQuery).matches;
        } else {
          media = this.mediaQuery.matches;
        }

        if (media && this.windowWidth !== window.innerWidth) {
          this.dotnetRef.invokeMethodAsync('Show', null);
          this.show();
        } else if (this.getState() && this.windowWidth !== window.innerWidth) {
          this.dotnetRef.invokeMethodAsync('Hide', null);
          this.hide();
        }
      }
    };

    SfSidebar.prototype.setDimension = function (width) {
      if (typeof width === 'number') {
        width = sf.base.formatUnit(width);
      } else if (typeof width === 'string') {
        width = width.match(/px|%|em/) ? width : sf.base.formatUnit(width);
      } else {
        width = '100%';
      }

      return width;
    };

    SfSidebar.prototype.setTimeOut = function () {
      var sibling = document.querySelector('.e-main-content') || this.targetEle;

      if (this.element.classList.contains(OPEN) && sibling) {
        if (this.position === 'Left') {
          this.width === 'auto' ? sibling.style.marginLeft = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginLeft = this.setDimension(this.width);
        } else {
          this.width === 'auto' ? sibling.style.marginRight = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginRight = this.setDimension(this.width);
        }
      } else if (this.element.classList.contains(CLOSE) && sibling) {
        if (this.position === 'Left') {
          this.dockSize === 'auto' ? sibling.style.marginLeft = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginLeft = this.setDimension(this.dockSize);
        } else {
          this.dockSize === 'auto' ? sibling.style.marginRight = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginRight = this.setDimension(this.dockSize);
        }
      }
    }; // tslint:disable


    SfSidebar.prototype.setType = function (property) {
      // tslint:enable
      var elementWidth = this.element.getBoundingClientRect().width;
      elementWidth = this.enableDock && !this.element.classList.contains(OPEN) ? this.dockSize : elementWidth;
      var sibling = document.querySelector('.e-main-content') || this.targetEle;
      var left = 'Left';

      if (property) {
        this.position = property.Position;
        this.types = property.Type;
      }

      if (sibling) {
        this.position === left ? sibling.style.marginRight = '0px' : sibling.style.marginLeft = '0px';
        sibling.style.transform = 'translateX(' + 0 + 'px)';

        if (!sf.base.Browser.isDevice && this.types !== 'Auto') {
          this.position === left ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';
        }
      }

      var margin = typeof elementWidth === 'string' ? elementWidth : elementWidth + 'px';
      var eleWidth = this.position === left ? elementWidth : -elementWidth;
      var value = sibling && (this.enableDock || this.element.classList.contains(OPEN));

      switch (this.types) {
        case PUSH:
          if (value) {
            this.position === left ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
          }

          break;

        case SLIDE:
          if (value) {
            sibling.style.transform = 'translateX(' + eleWidth + 'px)';
          }

          break;

        case OVER:
          if (this.enableDock && this.element.classList.contains(CLOSE) && sibling) {
            this.position === left ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
          }

          break;

        case AUTO:
          if (sibling) {
            if (sf.base.Browser.isDevice) {
              if (this.enableDock && !this.getState()) {
                this.position === left ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
              }
            } else {
              if (this.enableDock || this.element.classList.contains(OPEN)) {
                this.position === left ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
              }
            }
          }

      }
    };

    SfSidebar.prototype.destroy = function () {
      this.destroyBackDrop();
      this.element.style.width = '';
      this.element.style.zIndex = '';
      this.element.style.transform = '';
      this.windowWidth = null;
      var sibling = document.querySelector('.e-main-content') || this.targetEle;

      if (!sf.base.isNullOrUndefined(sibling)) {
        sibling.style.margin = '';
        sibling.style.transform = '';
      }

      this.unWireEvents();
    };

    return SfSidebar;
  }(); // tslint:disable


  var Sidebar = {
    initialize: function initialize(element, dotnetRef, property) {
      new SfSidebar(element, dotnetRef, property);
      element.blazor__instance.initialize();
      this.type = property.Type;
    },
    setType: function setType(element, dotnetRef, property) {
      element.blazor__instance.setType(property);
    },
    hide: function hide(element, dotnetRef, property) {
      element.blazor__instance.hide();
    },
    createBackDrop: function createBackDrop(element, dotnetRef, property) {
      element.blazor__instance.createBackDrop(element, dotnetRef, property);
    },
    setCloseOnDocumentClick: function setCloseOnDocumentClick(element, dotnetRef, property) {
      element.blazor__instance.setCloseOnDocumentClick(property);
    },
    setEnableGestures: function setEnableGestures(element, dotnetRef, property) {
      element.blazor__instance.setEnableGestures();
    },
    changeTarget: function changeTarget(element, dotnetRef, property) {
      element.blazor__instance.changeTarget(property);
    },
    destroy: function destroy(element, dotnetRef, property) {
      element.blazor__instance.destroy();
    }
  };
  return Sidebar;
}();

/***/ })

}]);