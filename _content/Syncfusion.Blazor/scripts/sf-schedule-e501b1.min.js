(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-schedule"],{

/***/ "./bundles/sf-schedule.js":
/*!********************************!*\
  !*** ./bundles/sf-schedule.js ***!
  \********************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-schedule.js */ "./modules/sf-schedule.js");
/* harmony import */ var _modules_sf_schedule_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_schedule_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-schedule.js":
/*!********************************!*\
  !*** ./modules/sf-schedule.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.Schedule = function () {
  'use strict';
  /**
   * CSS Constants
   */

  var ROOT = 'e-schedule';
  var RTL = 'e-rtl';
  var DEVICE_CLASS = 'e-device';
  var TABLE_CONTAINER_CLASS = 'e-table-container';
  var ALLDAY_CELLS_CLASS = 'e-all-day-cells';
  var ALLDAY_ROW_CLASS = 'e-all-day-row';
  var CONTENT_TABLE_CLASS = 'e-content-table';
  var WORK_CELLS_CLASS = 'e-work-cells';
  var WORK_HOURS_CLASS = 'e-work-hours';
  var POPUP_OPEN = 'e-popup-open';
  var DATE_HEADER_WRAP_CLASS = 'e-date-header-wrap';
  var DATE_HEADER_CONTAINER_CLASS = 'e-date-header-container';
  var HEADER_CELLS_CLASS = 'e-header-cells';
  var CURRENT_DAY_CLASS = 'e-current-day';
  var CURRENTDATE_CLASS = 'e-current-date';
  var RESOURCE_GROUP_CELLS_CLASS = 'e-resource-group-cells';
  var RESOURCE_COLUMN_WRAP_CLASS = 'e-resource-column-wrap';
  var TIME_CELLS_WRAP_CLASS = 'e-time-cells-wrap';
  var CURRENT_TIME_CLASS = 'e-current-time';
  var CURRENT_TIMELINE_CLASS = 'e-current-timeline';
  var PREVIOUS_TIMELINE_CLASS = 'e-previous-timeline';
  var HIDE_CHILDS_CLASS = 'e-hide-childs';
  var TIMELINE_WRAPPER_CLASS = 'e-timeline-wrapper';
  var APPOINTMENT_WRAPPER_CLASS = 'e-appointment-wrapper';
  var HEADER_TOOLBAR = 'e-schedule-toolbar';
  var RESOURCE_HEADER_TOOLBAR = 'e-schedule-resource-toolbar';
  var SELECTED_CELL_CLASS = 'e-selected-cell';
  var WEEK_NUMBER_WRAPPER_CLASS = 'e-week-number-wrapper';
  var APPOINTMENT_WRAP_CLASS = 'e-appointment-wrap';
  var WRAPPER_CONTAINER_CLASS = 'e-wrapper-container';
  var APPOINTMENT_CLASS = 'e-appointment';
  var APPOINTMENT_BORDER = 'e-appointment-border';
  var TABLE_WRAP_CLASS = 'e-table-wrap';
  var CONTENT_WRAP_CLASS = 'e-content-wrap';
  var AGENDA_CELLS_CLASS = 'e-agenda-cells';
  var AGENDA_SELECTED_CELL = 'e-active-appointment-agenda';
  var NAVIGATE_CLASS = 'e-navigate';
  var DATE_HEADER_CLASS = 'e-date-header';
  var NEW_EVENT_CLASS = 'e-new-event';
  var ALLDAY_APPOINTMENT_SECTION_CLASS = 'e-all-day-appointment-section';
  var MORE_INDICATOR_CLASS = 'e-more-indicator';
  var CELL_POPUP_CLASS = 'e-cell-popup';
  var EVENT_POPUP_CLASS = 'e-event-popup';
  var POPUP_FOOTER_CLASS = 'e-popup-footer';
  var QUICK_POPUP_EVENT_DETAILS_CLASS = 'e-event-details';
  var EVENT_CREATE_CLASS = 'e-event-create';
  var EDIT_EVENT_CLASS = 'e-event-edit';
  var DELETE_EVENT_CLASS = 'e-event-delete';
  var MORE_POPUP_WRAPPER_CLASS = 'e-more-popup-wrapper';
  var MORE_EVENT_HEADER_DATE_CLASS = 'e-header-date';
  var MORE_EVENT_CLOSE_CLASS = 'e-more-event-close';
  var SUBJECT_CLASS = 'e-subject';
  var EDIT_CLASS = 'e-edit';
  var DELETE_CLASS = 'e-delete';
  var CLOSE_CLASS = 'e-close';
  var HIDDEN_CLASS = 'e-hidden';
  var POPUP_WRAPPER_CLASS = 'e-quick-popup-wrapper';
  var MONTH_HEADER_WRAPPER = 'e-month-header-wrapper';
  /**
   * Schedule common utilities
   */

  var WEEK_LENGTH = 7;
  var MS_PER_DAY = 86400000;
  var MS_PER_MINUTE = 60000;

  function getWeekFirstDate(date1, firstDayOfWeek) {
    var date = new Date(date1.getTime());
    firstDayOfWeek = (firstDayOfWeek - date.getDay() + 7 * -1) % 7;
    return new Date(date.setDate(date.getDate() + firstDayOfWeek));
  }

  function getWeekLastDate(date, firstDayOfWeek) {
    var weekFirst = getWeekFirstDate(date, firstDayOfWeek);
    var weekLast = new Date(weekFirst.getFullYear(), weekFirst.getMonth(), weekFirst.getDate() + 6);
    return new Date(weekLast.getTime());
  }

  function firstDateOfMonth(date) {
    return new Date(date.getFullYear(), date.getMonth());
  }

  function lastDateOfMonth(dt) {
    return new Date(dt.getFullYear(), dt.getMonth() + 1, 0);
  }

  function resetTime(date) {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate());
  }

  function getDateInMs(date) {
    var sysDateOffset = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0).getTimezoneOffset();
    var dateOffset = date.getTimezoneOffset();
    var tzOffsetDiff = dateOffset - sysDateOffset;
    return date.getTime() - new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0).getTime() - tzOffsetDiff * 60 * 1000;
  }

  function addDays(date, i) {
    date = new Date('' + date);
    return new Date(date.setDate(date.getDate() + i));
  }

  function addMonths(date, i) {
    date = new Date('' + date);
    var day = date.getDate();
    date.setDate(1);
    date.setMonth(date.getMonth() + i);
    date.setDate(Math.min(day, getMaxDays(date)));
    return date;
  }

  function getMaxDays(d) {
    var date = new Date(d.getFullYear(), d.getMonth() + 1, 0);
    return date.getDate();
  }
  /** @hidden */


  var scrollWidth = null;
  /** @hidden */

  function getScrollBarWidth() {
    if (scrollWidth !== null) {
      return scrollWidth;
    }

    var divNode = sf.base.createElement('div');
    var value = 0;
    divNode.style.cssText = 'width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;';
    document.body.appendChild(divNode);
    var ratio = devicePixelRatio ? devicePixelRatio.toFixed(2) === '1.10' || devicePixelRatio <= 1 ? Math.ceil(devicePixelRatio % 1) : Math.floor(devicePixelRatio % 1) : 0;
    value = divNode.offsetWidth - divNode.clientWidth - ratio | 0;
    document.body.removeChild(divNode);
    return scrollWidth = value;
  }

  function getOuterHeight(element) {
    var style = getComputedStyle(element);
    return element.offsetHeight + (parseInt(style.marginTop, 10) || 0) + (parseInt(style.marginBottom, 10) || 0);
  }

  function addLocalOffset(date) {
    if (sf.base.isBlazor()) {
      var dateValue = new Date(+date - date.getTimezoneOffset() * 60000);
      return dateValue;
    }

    return date;
  }
  /**
   * view base
   */


  var ViewBase =
  /** @class */
  function () {
    function ViewBase(parent) {
      this.parent = parent;
    }

    ViewBase.prototype.serverRenderLayout = function () {// Need only for layout server rendering
    };

    ViewBase.prototype.onDataReady = function (args) {// Need for events positioning
    };

    ViewBase.prototype.getScrollXIndent = function (content) {
      return content.offsetHeight - content.clientHeight > 0 ? getScrollBarWidth() : 0;
    };

    ViewBase.prototype.scrollTopPanel = function (target) {
      this.getDatesHeaderElement().firstElementChild.scrollLeft = target.scrollLeft;
    };

    ViewBase.prototype.scrollHeaderLabels = function (target) {
      var headerTable = this.element.querySelector('.e-date-header-wrap table');
      var colWidth = headerTable.offsetWidth / headerTable.querySelectorAll('colgroup col').length;

      var applyLeft = function applyLeft(headerCells, isRtl) {
        var currentCell;
        var tdLeft = 0;
        var colSpan = 0;
        var hiddenLeft = isRtl ? target.scrollWidth - target.offsetWidth - target.scrollLeft : target.scrollLeft;

        for (var _i = 0, headerCells_2 = headerCells; _i < headerCells_2.length; _i++) {
          var cell = headerCells_2[_i];
          colSpan += parseInt(cell.getAttribute('colSpan'), 10);

          if (colSpan > Math.floor(hiddenLeft / colWidth)) {
            currentCell = cell;
            break;
          }

          tdLeft += cell.offsetWidth;
        }

        currentCell.children[0].style[isRtl ? 'right' : 'left'] = hiddenLeft - tdLeft + 'px';
      };

      var classNames = ['.e-header-year-cell', '.e-header-month-cell', '.e-header-week-cell', '.e-header-cells'];

      for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {
        var className = classNames_1[_i];
        var headerCells = [].slice.call(this.element.querySelectorAll(className));

        if (headerCells.length > 0) {
          for (var _a = 0, headerCells_1 = headerCells; _a < headerCells_1.length; _a++) {
            var element = headerCells_1[_a];
            element.children[0].style[this.parent.options.enableRtl ? 'right' : 'left'] = '';
          }

          applyLeft(headerCells, this.parent.options.enableRtl);
        }
      }
    };

    ViewBase.prototype.getHeaderBarHeight = function (includeResHeight) {
      if (includeResHeight === void 0) {
        includeResHeight = false;
      }

      var headerBarHeight = 2;
      var headerBar = this.parent.element.querySelector('.' + HEADER_TOOLBAR);

      if (headerBar) {
        headerBarHeight += getOuterHeight(headerBar);
      }

      if (this.parent.uiStateValues.isGroupAdaptive || includeResHeight) {
        var resHeader = this.parent.element.querySelector('.' + RESOURCE_HEADER_TOOLBAR);

        if (resHeader) {
          headerBarHeight += resHeader.offsetHeight;
        }
      }

      return headerBarHeight;
    };

    ViewBase.prototype.getDatesHeaderElement = function () {
      return this.element.querySelector('.' + DATE_HEADER_CONTAINER_CLASS);
    };

    ViewBase.prototype.highlightCurrentTime = function () {// Here showTimeIndicator functionalities
    };

    ViewBase.prototype.startDate = function () {
      if (this.parent.options.currentView === 'WorkWeek') {
        var startDate = this.renderDates[0]; // if (this.parent.activeViewOptions.group.resources.length > 0) {
        //     startDate = this.parent.resourceBase.getResourceRenderDates()[0];
        // }

        return startDate;
      }

      return this.renderDates[0];
    };

    ViewBase.prototype.endDate = function () {
      if (this.parent.options.currentView === 'WorkWeek') {
        var endDate = addDays(this.renderDates[this.renderDates.length - 1], 1); // if (this.parent.activeViewOptions.group.resources.length > 0) {
        //     endDate = util.addDays(this.parent.resourceBase.getResourceRenderDates().slice(-1)[0], 1);
        // }

        return endDate;
      }

      return addDays(this.renderDates[this.renderDates.length - 1], 1);
    };

    ViewBase.prototype.getStartHour = function () {
      var startHour = this.parent.getStartEndTime(this.parent.activeViewOptions.startHour);

      if (sf.base.isNullOrUndefined(startHour)) {
        startHour = new Date(2000, 0, 0, 0);
      }

      return startHour;
    };

    ViewBase.prototype.getEndHour = function () {
      var endHour = this.parent.getStartEndTime(this.parent.activeViewOptions.endHour);

      if (sf.base.isNullOrUndefined(endHour)) {
        endHour = new Date(2000, 0, 0, 0);
      }

      return endHour;
    };

    ViewBase.prototype.isCurrentDate = function (date) {
      return date.setHours(0, 0, 0, 0) === this.parent.getCurrentTime().setHours(0, 0, 0, 0);
    };

    ViewBase.prototype.isCurrentMonth = function (date) {
      return date.getFullYear() === this.parent.getCurrentTime().getFullYear() && date.getMonth() === this.parent.getCurrentTime().getMonth();
    };

    ViewBase.prototype.isWorkDay = function (date, workDays) {
      if (workDays === void 0) {
        workDays = this.parent.activeViewOptions.workDays;
      }

      if (workDays.indexOf(date.getDay()) >= 0) {
        return true;
      }

      return false;
    };

    ViewBase.prototype.isWorkHour = function (date, startHour, endHour, workDays) {
      if (sf.base.isNullOrUndefined(startHour) || sf.base.isNullOrUndefined(endHour)) {
        return false;
      }

      startHour.setMilliseconds(0);
      endHour.setMilliseconds(0);
      return !(getDateInMs(date) < getDateInMs(startHour) || getDateInMs(date) >= getDateInMs(endHour) || !this.isWorkDay(date, workDays));
    };

    ViewBase.prototype.getRenderDates = function (workDays) {
      var renderDates = []; // Due to same code for vertical and time line, week & work week views, if condition has used

      if (this.parent.options.currentView === 'Week' || this.parent.options.currentView === 'TimelineWeek') {
        var selectedDate = resetTime(this.parent.options.selectedDate);
        var start = getWeekFirstDate(selectedDate, this.parent.activeViewOptions.firstDayOfWeek);

        for (var i = 0, length_1 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_1; i++) {
          if (this.parent.activeViewOptions.showWeekend) {
            renderDates.push(start);
          } else {
            if (this.isWorkDay(start, workDays)) {
              renderDates.push(start);
            }
          }

          start = addDays(start, 1);
        }
      } else if (this.parent.options.currentView === 'WorkWeek' || this.parent.options.currentView === 'TimelineWorkWeek') {
        var date = resetTime(this.parent.options.selectedDate);
        var start = getWeekFirstDate(date, this.parent.activeViewOptions.firstDayOfWeek);

        for (var i = 0, length_2 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_2; i++) {
          if (this.isWorkDay(start, workDays)) {
            renderDates.push(start);
          }

          start = addDays(start, 1);
        }
      } else {
        var start = resetTime(this.parent.options.selectedDate);

        do {
          if (this.parent.activeViewOptions.showWeekend) {
            renderDates.push(start);
          } else {
            if (this.isWorkDay(start, workDays)) {
              renderDates.push(start);
            }
          }

          start = addDays(start, 1);
        } while (this.parent.activeViewOptions.interval !== renderDates.length);
      }

      if (!workDays) {
        this.renderDates = renderDates;
      }

      return renderDates;
    };

    ViewBase.prototype.getColElements = function () {
      return [].slice.call(this.element.querySelectorAll('.' + CONTENT_WRAP_CLASS + ' col, .' + DATE_HEADER_WRAP_CLASS + ' col'));
    };

    ViewBase.prototype.setColWidth = function (content) {
      if (this.parent.isTimelineView()) {
        var colElements = this.getColElements();
        var contentBody = this.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tbody');
        var colWidth_1 = Math.ceil(contentBody.offsetWidth / (colElements.length / 2));
        colElements.forEach(function (col) {
          return sf.base.setStyleAttribute(col, {
            'width': sf.base.formatUnit(colWidth_1)
          });
        });

        if (content.offsetHeight !== content.clientHeight) {
          var leftPanelSelector = "." + MONTH_HEADER_WRAPPER + ",." + RESOURCE_COLUMN_WRAP_CLASS;
          var leftPanel = this.parent.element.querySelector(leftPanelSelector);

          if (!sf.base.isNullOrUndefined(leftPanel)) {
            sf.base.setStyleAttribute(leftPanel, {
              'height': sf.base.formatUnit(content.clientHeight)
            });
          }
        }
      }
    };

    ViewBase.prototype.resetColWidth = function () {
      var colElements = this.getColElements();

      for (var _i = 0, colElements_1 = colElements; _i < colElements_1.length; _i++) {
        var col = colElements_1[_i];
        col.style.width = '';
      }
    };

    ViewBase.prototype.getContentAreaElement = function () {
      return this.element.querySelector('.' + CONTENT_WRAP_CLASS);
    };

    ViewBase.prototype.scrollToDate = function (scrollDate) {
      if (['Month', 'TimelineMonth'].indexOf(this.parent.options.currentView) === -1 || sf.base.isNullOrUndefined(scrollDate)) {
        return;
      }

      var scrollWrap = this.getContentAreaElement();
      var tdDate = this.parent.getMsFromDate(new Date(resetTime(new Date(+scrollDate)).getTime()));
      var dateElement = scrollWrap.querySelector("." + WORK_CELLS_CLASS + "[data-date=\"" + tdDate + "\"]");

      if (this.parent.options.currentView === 'Month' && dateElement) {
        scrollWrap.scrollTop = dateElement.offsetTop;
      }

      if (this.parent.options.currentView === 'TimelineMonth' && dateElement) {
        scrollWrap.scrollLeft = dateElement.offsetLeft;
      }
    };

    return ViewBase;
  }();

  var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    return function (d, b) {
      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * vertical view
   */


  var VerticalViews =
  /** @class */
  function (_super) {
    __extends(VerticalViews, _super);
    /**
     * Constructor for vertical view
     */


    function VerticalViews(parent) {
      var _this = _super.call(this, parent) || this;

      _this.isInverseTableSelect = true;
      _this.baseCssClass = 'e-vertical-view';
      return _this;
    }

    VerticalViews.prototype.onDataReady = function () {// if (this.parent.activeViewOptions.timeScale.enable) {
      //     let appointment: VerticalEvent = new VerticalEvent(this.parent);
      //     appointment.renderAppointments();
      // } else {
      //     let appointment: MonthEvent = new MonthEvent(this.parent);
      //     appointment.renderAppointments();
      // }
    };

    VerticalViews.prototype.onContentScroll = function (e) {
      this.parent.removeNewEventElement();
      var target = e.target;
      this.parent.onVirtualScroll();
      this.scrollLeftPanel(target);
      this.scrollTopPanel(target);

      if (!this.parent.isAdaptive) {
        this.parent.uiStateValues.top = target.scrollTop;
      }

      this.parent.uiStateValues.left = target.scrollLeft;

      if (!sf.base.isNullOrUndefined(this.parent.quickPopup)) {
        this.parent.quickPopup.hide();
      }
    };

    VerticalViews.prototype.onApaptiveMove = function (e) {
      if (this.parent.uiStateValues.action) {
        e.preventDefault();
      }
    };

    VerticalViews.prototype.scrollLeftPanel = function (target) {
      var leftPanel = this.getLeftPanelElement();

      if (!sf.base.isNullOrUndefined(leftPanel)) {
        leftPanel.scrollTop = target.scrollTop;
      }
    };

    VerticalViews.prototype.onScrollUiUpdate = function (args) {
      var headerBarHeight = this.getHeaderBarHeight();
      var timecells = this.getLeftPanelElement();
      var content = this.getContentAreaElement();
      var header = this.getDatesHeaderElement();
      var scrollerHeight = this.parent.element.offsetHeight - headerBarHeight - header.offsetHeight;
      this.setColWidth(content);
      this.setContentHeight(content, timecells, scrollerHeight);
      var scrollBarWidth = getScrollBarWidth(); // tslint:disable:no-any

      header.firstElementChild.style[args.cssProperties.rtlBorder] = '';
      header.style[args.cssProperties.rtlPadding] = '';

      if (content.offsetWidth - content.clientWidth > 0) {
        header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';
        header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';
      } else {
        header.firstElementChild.style[args.cssProperties.border] = '';
        header.style[args.cssProperties.padding] = '';
      } // tslint:enable:no-any


      if (!args.isPreventScrollUpdate) {
        if (this.parent.uiStateValues.isInitial) {
          this.scrollToWorkHour();
          this.parent.uiStateValues.isInitial = false;
        } else {
          if (timecells) {
            timecells.scrollTop = this.parent.uiStateValues.top;
          }

          content.scrollTop = this.parent.uiStateValues.top;
          content.scrollLeft = this.parent.uiStateValues.left;
        }
      }

      if (this.parent.activeViewOptions.timeScale.enable) {
        this.highlightCurrentTime();
      }
    };

    VerticalViews.prototype.setContentHeight = function (element, leftPanelElement, height) {
      if (!sf.base.isNullOrUndefined(leftPanelElement)) {
        leftPanelElement.style.height = this.parent.options.height === 'auto' ? 'auto' : sf.base.formatUnit(height - this.getScrollXIndent(element));
      }

      element.style.height = this.parent.options.height === 'auto' ? 'auto' : sf.base.formatUnit(height);
    };

    VerticalViews.prototype.scrollToWorkHour = function () {
      if (this.parent.options.workHours.highlight) {
        var firstWorkHourCell = this.element.querySelector('.' + WORK_HOURS_CLASS);

        if (firstWorkHourCell) {
          this.getContentAreaElement().scrollTop = firstWorkHourCell.offsetTop;
          this.parent.uiStateValues.top = firstWorkHourCell.offsetTop;
          this.parent.uiStateValues.left = 0;
        }
      }
    };

    VerticalViews.prototype.scrollToHour = function (hour, scrollDate) {
      var date = this.parent.getStartEndTime(hour);

      if (sf.base.isNullOrUndefined(date) || !sf.base.isNullOrUndefined(scrollDate)) {
        return;
      }

      this.getContentAreaElement().scrollTop = this.getTopFromDateTime(date);
    };

    VerticalViews.prototype.isWorkHourRange = function (date) {
      return this.getStartHour().getTime() <= date.getTime() && this.getEndHour().getTime() >= date.getTime();
    };

    VerticalViews.prototype.highlightCurrentTime = function () {
      var _this = this;

      if (this.parent.activeViewOptions.headerRows && this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {
        return;
      }

      var curEle = [].slice.call(this.element.querySelectorAll('.' + CURRENT_DAY_CLASS));

      if (curEle.length > 0) {
        sf.base.removeClass(curEle, CURRENT_DAY_CLASS);
      }

      var curDate = addLocalOffset(new Date(new Date().setHours(0, 0, 0, 0)));
      var queryString = '.' + DATE_HEADER_CLASS + '[data-date="' + curDate.getTime().toString() + '"]';
      curEle = [].slice.call(this.element.querySelectorAll(queryString));

      for (var _i = 0, curEle_1 = curEle; _i < curEle_1.length; _i++) {
        var ele = curEle_1[_i];
        sf.base.addClass([ele], CURRENT_DAY_CLASS);
      }

      if (this.parent.options.showTimeIndicator && this.isWorkHourRange(this.parent.getCurrentTime())) {
        var currentDateIndex = this.getCurrentTimeIndicatorIndex();

        if (currentDateIndex.length > 0) {
          var workCells = [].slice.call(this.element.querySelectorAll('.' + WORK_CELLS_CLASS));

          if (workCells.length > 0) {
            this.changeCurrentTimePosition();
          }

          if (sf.base.isNullOrUndefined(this.currentTimeIndicatorTimer)) {
            this.currentTimeIndicatorTimer = window.setInterval(function () {
              _this.changeCurrentTimePosition();
            }, MS_PER_MINUTE);
          }
        } else {
          this.clearCurrentTimeIndicatorTimer();
        }
      } else {
        this.clearCurrentTimeIndicatorTimer();
      }
    };

    VerticalViews.prototype.getCurrentTimeIndicatorIndex = function () {
      var currentDateIndex = [];

      if (!sf.base.isNullOrUndefined(this.parent.resourceBase) && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var count = 0;

        for (var _i = 0, _a = this.parent.resourceBase.lastResourceLevel; _i < _a.length; _i++) {
          var resource = _a[_i];
          var index = this.parent.getIndexOfDate(resource.renderDates, resetTime(this.parent.getCurrentTime()));

          if (index >= 0) {
            var resIndex = this.parent.activeViewOptions.group.byDate ? this.parent.resourceBase.lastResourceLevel.length * index + count : count + index;
            currentDateIndex.push(resIndex);
          }

          count += this.parent.activeViewOptions.group.byDate ? 1 : resource.renderDates.length;
        }
      } else {
        var renderDates = this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0 ? this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex].renderDates : this.renderDates;
        var index = this.parent.getIndexOfDate(renderDates, resetTime(this.parent.getCurrentTime()));

        if (index >= 0) {
          currentDateIndex.push(index);
        }
      }

      return currentDateIndex;
    };

    VerticalViews.prototype.clearCurrentTimeIndicatorTimer = function () {
      if (!sf.base.isNullOrUndefined(this.currentTimeIndicatorTimer)) {
        window.clearInterval(this.currentTimeIndicatorTimer);
        this.currentTimeIndicatorTimer = null;
        this.removeCurrentTimeIndicatorElements();
      }
    };

    VerticalViews.prototype.removeCurrentTimeIndicatorElements = function () {
      var queryString = '.' + PREVIOUS_TIMELINE_CLASS + ',.' + CURRENT_TIMELINE_CLASS + ',.' + CURRENT_TIME_CLASS;
      var timeIndicator = [].slice.call(this.element.querySelectorAll(queryString));

      for (var _i = 0, timeIndicator_1 = timeIndicator; _i < timeIndicator_1.length; _i++) {
        var indicator = timeIndicator_1[_i];
        sf.base.remove(indicator);
      }
    };

    VerticalViews.prototype.changeCurrentTimePosition = function () {
      if (this.parent.isDestroyed) {
        return;
      }

      this.removeCurrentTimeIndicatorElements();
      var currentDateIndex = this.getCurrentTimeIndicatorIndex();
      var firstRow = this.parent.getContentTable().rows[0];
      var top = this.getTopFromDateTime(this.parent.getCurrentTime());
      var topInPx = sf.base.formatUnit(top);
      var rowIndex = Math.floor(top / firstRow.cells[0].offsetHeight);

      if (sf.base.isNullOrUndefined(rowIndex) || isNaN(rowIndex)) {
        return;
      }

      var curTimeWrap = [].slice.call(this.element.querySelectorAll('.' + TIMELINE_WRAPPER_CLASS));

      for (var i = 0, length_1 = currentDateIndex[0]; i < length_1; i++) {
        curTimeWrap[i].appendChild(sf.base.createElement('div', {
          className: PREVIOUS_TIMELINE_CLASS,
          styles: 'top:' + topInPx
        }));
      }

      for (var _i = 0, currentDateIndex_1 = currentDateIndex; _i < currentDateIndex_1.length; _i++) {
        var day = currentDateIndex_1[_i];
        curTimeWrap[day].appendChild(sf.base.createElement('div', {
          className: CURRENT_TIMELINE_CLASS,
          styles: 'top:' + topInPx
        }));
      }

      var currentTimeEle = sf.base.createElement('div', {
        //innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),
        className: CURRENT_TIME_CLASS,
        styles: 'top:' + topInPx
      });
      var timeCellsWrap = this.getLeftPanelElement();
      var timeTrs = [].slice.call(timeCellsWrap.querySelectorAll('tr'));

      if (rowIndex <= timeTrs.length) {
        sf.base.removeClass(timeCellsWrap.querySelectorAll('.' + HIDE_CHILDS_CLASS), HIDE_CHILDS_CLASS);
        sf.base.addClass([timeTrs[rowIndex].lastElementChild], HIDE_CHILDS_CLASS);
        sf.base.prepend([currentTimeEle], timeCellsWrap);
        currentTimeEle.style.top = sf.base.formatUnit(currentTimeEle.offsetTop - currentTimeEle.offsetHeight / 2);
      }
    };

    VerticalViews.prototype.getTopFromDateTime = function (date) {
      var startHour = this.getStartHour();
      var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());
      return diffInMinutes * this.getWorkCellHeight() * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;
    };

    VerticalViews.prototype.getWorkCellHeight = function () {
      return this.element.querySelector('.' + WORK_CELLS_CLASS).offsetHeight;
    };

    VerticalViews.prototype.renderLayout = function () {
      this.element = this.parent.element.querySelector('.' + TABLE_WRAP_CLASS); // if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.element.querySelector('.' + cls.RESOURCE_TOOLBAR_CONTAINER)) {
      //     this.renderResourceMobileLayout();
      // }

      var headerCells = [].slice.call(this.element.querySelectorAll('.' + DATE_HEADER_WRAP_CLASS + ' td.' + HEADER_CELLS_CLASS));

      for (var _i = 0, headerCells_1 = headerCells; _i < headerCells_1.length; _i++) {
        var cell = headerCells_1[_i];
        sf.base.EventHandler.clearEvents(cell);
        this.wireMouseEvents(cell);
      }

      var alldayCells = [].slice.call(this.element.querySelectorAll('.' + DATE_HEADER_WRAP_CLASS + ' td.' + ALLDAY_CELLS_CLASS));

      for (var _a = 0, alldayCells_1 = alldayCells; _a < alldayCells_1.length; _a++) {
        var cell = alldayCells_1[_a];
        sf.base.EventHandler.clearEvents(cell);
        this.wireCellEvents(cell);
      }

      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.setTranslateValue();
      }

      var wrap = this.element.querySelector('.' + CONTENT_WRAP_CLASS);
      var contentBody = this.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tbody');
      sf.base.EventHandler.clearEvents(contentBody);
      this.wireCellEvents(contentBody);
      sf.base.EventHandler.clearEvents(wrap);
      sf.base.EventHandler.add(wrap, 'scroll', this.onContentScroll, this);
      sf.base.EventHandler.add(wrap, sf.base.Browser.touchMoveEvent, this.onApaptiveMove, this); //this.wireExpandCollapseIconEvents();

      this.parent.setDimensions();
    };

    VerticalViews.prototype.wireCellEvents = function (element) {
      sf.base.EventHandler.add(element, 'mousedown', this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
      this.wireMouseEvents(element);
    };

    VerticalViews.prototype.wireMouseEvents = function (element) {
      sf.base.EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);

      if (!this.parent.isAdaptive) {
        sf.base.EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
      }
    };

    VerticalViews.prototype.getLeftPanelElement = function () {
      return this.element.querySelector('.' + TIME_CELLS_WRAP_CLASS);
    };

    VerticalViews.prototype.getEndDateFromStartDate = function (start) {
      var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * MS_PER_MINUTE;
      var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;
      var end = new Date(start.getTime());
      end.setMilliseconds(end.getMilliseconds() + msInterval);
      return end;
    };

    VerticalViews.prototype.destroy = function () {
      this.clearCurrentTimeIndicatorTimer();

      if (this.element) {
        var contentScrollableEle = this.getContentAreaElement();

        if (contentScrollableEle) {
          sf.base.EventHandler.remove(contentScrollableEle, 'scroll', this.onContentScroll);
        }

        this.element = null;
      }
    };

    return VerticalViews;
  }(ViewBase);

  var __extends$1 = undefined && undefined.__extends || function () {
    var _extendStatics2 = function extendStatics(d, b) {
      _extendStatics2 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics2(d, b);
    };

    return function (d, b) {
      _extendStatics2(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * timeline view
   */


  var TimelineViews =
  /** @class */
  function (_super) {
    __extends$1(TimelineViews, _super);

    function TimelineViews(parent) {
      var _this = _super.call(this, parent) || this;

      _this.baseCssClass = 'e-timeline-view';
      return _this;
    }

    TimelineViews.prototype.getLeftPanelElement = function () {
      return this.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);
    };

    TimelineViews.prototype.scrollTopPanel = function (target) {
      _super.prototype.scrollTopPanel.call(this, target);

      this.scrollHeaderLabels(target);
    };

    TimelineViews.prototype.scrollToWorkHour = function () {
      var start = this.parent.getStartEndTime(this.parent.options.workHours.start);
      var currDateTime = this.isWorkDay(this.parent.options.selectedDate) && this.parent.options.workHours.highlight && !sf.base.isNullOrUndefined(start) ? new Date(+this.parent.options.selectedDate).setHours(start.getHours(), start.getMinutes(), 0, 0) : new Date(+this.parent.options.selectedDate).setHours(0, 0, 0, 0);
      var queryString = '[data-date="' + this.parent.getMsFromDate(new Date(currDateTime)) + '"]';
      var firstWorkHourCell = this.element.querySelector(queryString);

      if (firstWorkHourCell) {
        this.getContentAreaElement().scrollLeft = firstWorkHourCell.offsetLeft;
      }
    };

    TimelineViews.prototype.scrollToHour = function (hour, scrollDate) {
      var date;
      var index;

      if (scrollDate) {
        index = this.parent.getIndexOfDate(this.renderDates, this.parent.resetTime(scrollDate));

        if (index >= 0) {
          var timeString = hour.split(':');

          if (timeString.length === 2) {
            date = new Date(scrollDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0));
          }
        }
      }

      date = sf.base.isNullOrUndefined(scrollDate) ? this.parent.getStartEndTime(hour) : date;

      if (sf.base.isNullOrUndefined(date)) {
        return;
      }

      this.getContentAreaElement().scrollLeft = sf.base.isNullOrUndefined(scrollDate) ? this.getLeftFromDateTime(null, date) : this.getLeftFromDateTime([index], date);
    };

    TimelineViews.prototype.changeCurrentTimePosition = function () {
      if (this.parent.isDestroyed) {
        return;
      }

      this.removeCurrentTimeIndicatorElements();
      var currentDateIndex = this.getCurrentTimeIndicatorIndex();
      var left = this.getLeftFromDateTime(currentDateIndex, this.parent.getCurrentTime());
      var height = this.element.querySelector('.' + CONTENT_TABLE_CLASS).offsetHeight;
      var headerWrap = this.element.querySelector('.' + DATE_HEADER_WRAP_CLASS);
      var contentWrap = this.element.querySelector('.' + CONTENT_WRAP_CLASS);
      contentWrap.appendChild(sf.base.createElement('div', {
        className: CURRENT_TIMELINE_CLASS,
        styles: (this.parent.options.enableRtl ? 'right' : 'left') + ':' + sf.base.formatUnit(left) + '; height:' + sf.base.formatUnit(height)
      }));

      if (this.parent.virtualScrollModule) {
        var timeIndicator = this.parent.element.querySelector('.' + CURRENT_TIMELINE_CLASS);
        var element = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS + ' table');
        sf.base.setStyleAttribute(timeIndicator, {
          transform: element.style.transform
        });
      }

      var currentTimeEle = sf.base.createElement('div', {
        //innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),
        className: CURRENT_TIME_CLASS
      });
      headerWrap.appendChild(currentTimeEle);
      currentTimeEle.style[this.parent.options.enableRtl ? 'right' : 'left'] = sf.base.formatUnit(left - currentTimeEle.offsetWidth / 2);
    };

    TimelineViews.prototype.getLeftFromDateTime = function (currentDateIndex, date) {
      var startHour = this.getStartHour();
      var endHour = this.getEndHour();
      var diffInDates = 0;
      var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());

      if (!sf.base.isNullOrUndefined(currentDateIndex)) {
        var end = endHour.getHours() === 0 ? 24 : endHour.getHours();

        if (currentDateIndex[0] !== 0) {
          diffInDates = currentDateIndex[0] * ((end - startHour.getHours()) * 60) + (endHour.getMinutes() - startHour.getMinutes());
        }

        diffInMinutes = diffInDates + diffInMinutes;
      }

      return diffInMinutes * this.getWorkCellWidth() * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;
    };

    TimelineViews.prototype.getWorkCellWidth = function () {
      return this.element.querySelector('.e-work-cells').getBoundingClientRect().width;
    };

    TimelineViews.prototype.getCurrentTimeIndicatorIndex = function () {
      var currentDateIndex = [];
      var index = this.parent.getIndexOfDate(this.renderDates, this.parent.resetTime(this.parent.getCurrentTime()));

      if (index >= 0) {
        currentDateIndex.push(index);
      }

      return currentDateIndex;
    };

    TimelineViews.prototype.renderEvents = function () {// if (this.parent.activeViewOptions.timeScale.enable) {
      //     let appointment: TimelineEvent = new TimelineEvent(this.parent, 'hour');
      //     appointment.renderAppointments();
      // } else {
      //     let appointment: TimelineEvent = new TimelineEvent(this.parent, 'day');
      //     appointment.renderAppointments();
      // }
    };

    return TimelineViews;
  }(VerticalViews);

  var __extends$2 = undefined && undefined.__extends || function () {
    var _extendStatics3 = function extendStatics(d, b) {
      _extendStatics3 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics3(d, b);
    };

    return function (d, b) {
      _extendStatics3(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * month view
   */


  var Month =
  /** @class */
  function (_super) {
    __extends$2(Month, _super);
    /**
     * Constructor for month view
     */


    function Month(parent) {
      var _this = _super.call(this, parent) || this;

      _this.dayNameFormat = 'wide';
      _this.isInverseTableSelect = false;
      _this.monthDates = {};
      return _this;
    }

    Month.prototype.onDataReady = function (args) {// let monthEvent: MonthEvent = new MonthEvent(this.parent);
      // monthEvent.renderAppointments();
    };

    Month.prototype.onContentScroll = function (e) {
      this.parent.removeNewEventElement();
      this.parent.onVirtualScroll();
      this.scrollTopPanel(e.target);
      this.scrollLeftPanel(e.target);
    };

    Month.prototype.scrollLeftPanel = function (target) {
      var leftPanel = this.getLeftPanelElement();

      if (leftPanel) {
        leftPanel.scrollTop = target.scrollTop;
      }
    };

    Month.prototype.getLeftPanelElement = function () {
      return this.element.querySelector('.' + WEEK_NUMBER_WRAPPER_CLASS);
    };

    Month.prototype.onScrollUiUpdate = function (args) {
      var headerHeight = this.getHeaderBarHeight();
      var header = this.getDatesHeaderElement();
      var content = this.getContentAreaElement();
      var height = this.parent.element.offsetHeight - headerHeight - header.offsetHeight;
      var leftPanel = this.getLeftPanelElement();
      this.setContentHeight(content, leftPanel, height);
      var scrollBarWidth = getScrollBarWidth(); // tslint:disable:no-any

      header.firstElementChild.style[args.cssProperties.rtlBorder] = '';
      header.style[args.cssProperties.rtlPadding] = '';

      if (content.offsetWidth - content.clientWidth > 0) {
        header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';
        header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';
      } else {
        header.firstElementChild.style[args.cssProperties.border] = '';
        header.style[args.cssProperties.padding] = '';
      } // tslint:enable:no-any


      this.setColWidth(content);

      if (args.scrollPosition) {
        if (leftPanel) {
          leftPanel.scrollTop = args.scrollPosition.top;
        }

        content.scrollTop = args.scrollPosition.top;
        content.scrollLeft = args.scrollPosition.left;
      } else {
        var headerCell = document.querySelector('.' + HEADER_CELLS_CLASS + '[data-date="' + this.parent.getMsFromDate(this.parent.options.selectedDate) + '"]');
        content.scrollLeft = headerCell !== null ? headerCell.offsetLeft : 0;
      }
    };

    Month.prototype.setContentHeight = function (content, leftPanelElement, height) {
      content.style.height = 'auto';

      if (this.parent.options.currentView === 'Month') {
        content.style.height = sf.base.formatUnit(height);
      }

      if (leftPanelElement) {
        if (this.parent.options.currentView === 'MonthAgenda') {
          height = this.element.querySelector('.' + CONTENT_TABLE_CLASS).offsetHeight;
        }

        leftPanelElement.style.height = 'auto';
        leftPanelElement.style.height = sf.base.formatUnit(height - this.getScrollXIndent(content));
      }
    };

    Month.prototype.serverRenderLayout = function () {
      var curElem = [].slice.call(this.parent.element.querySelectorAll('.' + CURRENT_DAY_CLASS));

      if (curElem.length > 0) {
        sf.base.removeClass(curElem, CURRENT_DAY_CLASS);
      }

      var curDate = addLocalOffset(new Date(new Date().setHours(0, 0, 0, 0)));
      var queryString = '.' + WORK_CELLS_CLASS + '[data-date="' + curDate.getTime().toString() + '"]';

      if (this.parent.options.currentView === 'Month' || this.parent.options.currentView === 'MonthAgenda') {
        curElem = [].slice.call(this.parent.element.querySelectorAll('.' + CURRENTDATE_CLASS));

        if (curElem.length > 0) {
          sf.base.removeClass(curElem, CURRENTDATE_CLASS);
        }

        var curEle = [].slice.call(this.parent.element.querySelectorAll(queryString));

        for (var _i = 0, curEle_1 = curEle; _i < curEle_1.length; _i++) {
          var ele = curEle_1[_i];
          var index = ele.cellIndex;
          var curHeader = [].slice.call(this.parent.element.querySelectorAll('.' + HEADER_CELLS_CLASS))[index];
          sf.base.addClass([ele], CURRENTDATE_CLASS);
          sf.base.addClass([curHeader], CURRENT_DAY_CLASS);
        }
      }

      if (this.parent.options.currentView === 'TimelineMonth') {
        var curEle = this.parent.element.querySelector('.' + HEADER_CELLS_CLASS + '[data-date="' + curDate.getTime().toString() + '"]');

        if (!sf.base.isNullOrUndefined(curEle)) {
          sf.base.addClass([curEle], CURRENT_DAY_CLASS);
        }
      }

      this.element = this.parent.element.querySelector('.' + TABLE_WRAP_CLASS);
      var headerCells = [].slice.call(this.element.querySelectorAll('.' + DATE_HEADER_WRAP_CLASS + ' td.' + HEADER_CELLS_CLASS));

      for (var _a = 0, headerCells_1 = headerCells; _a < headerCells_1.length; _a++) {
        var cell = headerCells_1[_a];
        sf.base.EventHandler.clearEvents(cell);
        this.wireCellEvents(cell);
      }

      var contentBody = this.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tbody');
      sf.base.EventHandler.clearEvents(contentBody);
      this.wireCellEvents(contentBody);

      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.setTranslateValue();
      }

      var wrap = this.element.querySelector('.' + CONTENT_WRAP_CLASS);
      sf.base.EventHandler.clearEvents(wrap);
      sf.base.EventHandler.add(wrap, 'scroll', this.onContentScroll, this); // this.wireExpandCollapseIconEvents();

      this.renderAppointmentContainer(); // if (this.parent.uiStateValues.isGroupAdaptive && !target.querySelector('.' + cls.RESOURCE_TOOLBAR_CONTAINER)) {
      //     this.renderResourceMobileLayout();
      // }

      this.parent.setDimensions();
    };

    Month.prototype.renderLayout = function () {
      // this.dayNameFormat = this.getDayNameFormat();
      //this.colLevels = this.generateColumnLevels();
      if (this.parent.isTimelineView() && this.parent.resourceBase && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.resourceBase.setRenderedResources();
      }

      this.serverRenderLayout();
    };

    Month.prototype.wireCellEvents = function (element) {
      sf.base.EventHandler.add(element, 'mousedown', this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
      sf.base.EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);

      if (!this.parent.isAdaptive) {
        sf.base.EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
      }
    };

    Month.prototype.renderAppointmentContainer = function () {//Here needs to render mobile view appointment details on selected date
    };

    Month.prototype.getMonthStart = function (currentDate) {
      var monthStart = getWeekFirstDate(firstDateOfMonth(currentDate), this.parent.activeViewOptions.firstDayOfWeek);
      var start = new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());
      return start;
    };

    Month.prototype.getMonthEnd = function (currentDate) {
      var endDate = addMonths(currentDate, this.parent.activeViewOptions.interval - 1);
      var lastWeekOfMonth = getWeekFirstDate(lastDateOfMonth(endDate), this.parent.activeViewOptions.firstDayOfWeek);
      var monthEnd = addDays(lastWeekOfMonth, WEEK_LENGTH - 1);
      return monthEnd;
    };

    Month.prototype.getRenderDates = function (workDays) {
      var renderDates = [];
      var currentDate = resetTime(this.parent.options.selectedDate);
      var start = this.getMonthStart(currentDate);
      var monthEnd = this.getMonthEnd(currentDate);

      do {
        if (this.parent.activeViewOptions.showWeekend) {
          renderDates.push(start);
        } else {
          if (this.isWorkDay(start, workDays)) {
            renderDates.push(start);
          }
        }

        start = addDays(start, 1);
      } while (start.getTime() <= monthEnd.getTime());

      if (!workDays) {
        this.renderDates = renderDates;
      } // if (this.parent.headerModule) {
      //     this.parent.headerModule.previousNextIconHandler();
      // }


      return renderDates;
    };

    Month.prototype.getEndDateFromStartDate = function (start) {
      return addDays(new Date(start.getTime()), 1);
    };

    Month.prototype.destroy = function () {
      if (this.parent.isDestroyed) {
        return;
      }

      this.element = null;
    };

    return Month;
  }(ViewBase);

  var __extends$3 = undefined && undefined.__extends || function () {
    var _extendStatics4 = function extendStatics(d, b) {
      _extendStatics4 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics4(d, b);
    };

    return function (d, b) {
      _extendStatics4(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * month agenda view
   */


  var MonthAgenda =
  /** @class */
  function (_super) {
    __extends$3(MonthAgenda, _super);
    /**
     * Constructor
     */


    function MonthAgenda(parent) {
      var _this = _super.call(this, parent) || this;

      _this.dayNameFormat = 'narrow';
      _this.agendaDates = {}; // this.agendaBase = new AgendaBase(parent);

      _this.monthAgendaDate = new Date('' + parent.options.selectedDate);
      return _this;
    }

    MonthAgenda.prototype.renderAppointmentContainer = function () {
      this.setEventWrapperHeight();
    };

    MonthAgenda.prototype.setEventWrapperHeight = function () {
      var headerHeight = this.getHeaderBarHeight(true);
      var contentArea = this.getContentAreaElement().firstElementChild;
      var dateHeader = this.element.querySelector('.' + DATE_HEADER_WRAP_CLASS);
      var availableHeight = this.parent.element.offsetHeight - headerHeight - dateHeader.offsetHeight - contentArea.offsetHeight;
      var wrapperContainer = this.element.querySelector('.' + WRAPPER_CONTAINER_CLASS);
      var eventWrapper = this.element.querySelector('.' + APPOINTMENT_WRAP_CLASS);
      wrapperContainer.style.height = eventWrapper.style.height = sf.base.formatUnit(availableHeight);
    };

    MonthAgenda.prototype.onDataReady = function (args) {// this.setEventWrapperHeight();
      // this.clearElements();
      // let eventCollection: Object[] = args.processedData;
      // if (this.parent.uiStateValues.isGroupAdaptive) {
      //     let resource: TdData = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
      //     eventCollection = this.parent.eventBase.filterEventsByResource(resource, eventCollection);
      // }
      // this.parent.eventsProcessed = this.agendaBase.processAgendaEvents(eventCollection);
      // let count: number = 0;
      // for (let date of this.renderDates) {
      //     let filterData: Object[] = this.appointmentFiltering(date);
      //     let workCell: Element = this.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS)[count];
      //     if (filterData.length > 0) {
      //         if (!workCell.querySelector('.' + cls.APPOINTMENT_INDICATOR_CLASS)) {
      //             workCell.appendChild(createElement('div', { className: cls.APPOINTMENT_INDICATOR_CLASS }));
      //         }
      //         if (date.getTime() === util.resetTime(new Date(this.monthAgendaDate.getTime())).getTime()) {
      //             this.onEventRender(filterData, date);
      //         }
      //     }
      //     count++;
      // }
    };

    MonthAgenda.prototype.onCellClick = function (event) {
      // this.parent.quickPopup.quickPopupHide();
      // let filterData: Object[] = this.appointmentFiltering(event.startTime);
      // this.onEventRender(filterData, event.startTime);
      this.monthAgendaDate = new Date('' + event.startTime);
    };

    return MonthAgenda;
  }(Month);

  var __extends$4 = undefined && undefined.__extends || function () {
    var _extendStatics5 = function extendStatics(d, b) {
      _extendStatics5 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics5(d, b);
    };

    return function (d, b) {
      _extendStatics5(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * timeline month view
   */


  var TimelineMonth =
  /** @class */
  function (_super) {
    __extends$4(TimelineMonth, _super);

    function TimelineMonth(parent) {
      var _this = _super.call(this, parent) || this;

      _this.isInverseTableSelect = true;
      return _this;
    }

    TimelineMonth.prototype.onDataReady = function (args) {// let appointment: TimelineEvent = new TimelineEvent(this.parent, 'day');
      // appointment.renderAppointments();
    };

    TimelineMonth.prototype.getLeftPanelElement = function () {
      return this.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);
    };

    TimelineMonth.prototype.scrollTopPanel = function (target) {
      _super.prototype.scrollTopPanel.call(this, target);

      this.scrollHeaderLabels(target);
    };

    TimelineMonth.prototype.setContentHeight = function (content, leftPanelElement, height) {
      if (leftPanelElement) {
        leftPanelElement.style.height = sf.base.formatUnit(height - this.getScrollXIndent(content));
      }

      content.style.height = sf.base.formatUnit(height);
    };

    TimelineMonth.prototype.getMonthStart = function (currentDate) {
      var monthStart = firstDateOfMonth(resetTime(currentDate));
      return new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());
    };

    TimelineMonth.prototype.getMonthEnd = function (currentDate) {
      var monthStart = firstDateOfMonth(resetTime(currentDate));
      return lastDateOfMonth(addMonths(new Date(+monthStart), this.parent.activeViewOptions.interval - 1));
    };

    return TimelineMonth;
  }(Month);

  var __extends$5 = undefined && undefined.__extends || function () {
    var _extendStatics6 = function extendStatics(d, b) {
      _extendStatics6 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics6(d, b);
    };

    return function (d, b) {
      _extendStatics6(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * year and timeline year view
   */


  var Year =
  /** @class */
  function (_super) {
    __extends$5(Year, _super);

    function Year(parent) {
      var _this = _super.call(this, parent) || this;

      _this.isInverseTableSelect = false;
      return _this;
    }

    Year.prototype.renderLayout = function () {
      this.element = this.parent.element.querySelector('.' + TABLE_WRAP_CLASS);
      this.wireEvents(this.element.querySelector('.' + CONTENT_WRAP_CLASS), 'scroll');
      this.parent.setDimensions();
    };

    Year.prototype.onContentScroll = function (e) {
      var target = e.target;
      var headerWrapper = this.getDatesHeaderElement();

      if (headerWrapper) {
        headerWrapper.firstElementChild.scrollLeft = target.scrollLeft;
      }

      var scrollTopSelector = "." + MONTH_HEADER_WRAPPER + ",." + RESOURCE_COLUMN_WRAP_CLASS;
      var scrollTopElement = this.element.querySelector(scrollTopSelector);

      if (scrollTopElement) {
        scrollTopElement.scrollTop = target.scrollTop;
      }
    };

    Year.prototype.onScrollUiUpdate = function (args) {
      var height = this.parent.element.offsetHeight - this.getHeaderBarHeight();
      var headerWrapper = this.element.querySelector('.' + DATE_HEADER_CONTAINER_CLASS);

      if (headerWrapper) {
        height -= headerWrapper.offsetHeight;
      }

      var contentWrapper = this.element.querySelector('.' + CONTENT_WRAP_CLASS);

      if (contentWrapper) {
        contentWrapper.style.height = sf.base.formatUnit(height);
      }

      var leftPanelSelector = "." + MONTH_HEADER_WRAPPER + ",." + RESOURCE_COLUMN_WRAP_CLASS;
      var leftPanelElement = this.element.querySelector(leftPanelSelector);

      if (leftPanelElement) {
        leftPanelElement.style.height = sf.base.formatUnit(height - this.getScrollXIndent(contentWrapper));
      }

      if (!this.parent.isAdaptive && headerWrapper) {
        var scrollBarWidth = getScrollBarWidth(); // tslint:disable:no-any

        if (contentWrapper.offsetWidth - contentWrapper.clientWidth > 0) {
          headerWrapper.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';
          headerWrapper.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';
        } else {
          headerWrapper.firstElementChild.style[args.cssProperties.border] = '';
          headerWrapper.style[args.cssProperties.padding] = '';
        } // tslint:enable:no-any

      }

      this.setColWidth(this.getContentAreaElement());
    };

    Year.prototype.startDate = function () {
      var startDate = new Date(this.parent.options.selectedDate.getFullYear(), 0, 1);
      return getWeekFirstDate(startDate, this.parent.activeViewOptions.firstDayOfWeek);
    };

    Year.prototype.endDate = function () {
      var endDate = new Date(this.parent.options.selectedDate.getFullYear(), 11, 31);
      return addDays(getWeekLastDate(endDate, this.parent.activeViewOptions.firstDayOfWeek), 1);
    };

    Year.prototype.getEndDateFromStartDate = function (start) {
      var date = new Date(start.getTime());

      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        date = lastDateOfMonth(date);
      }

      return addDays(new Date(date.getTime()), 1);
    };

    Year.prototype.wireEvents = function (element, type) {
      if (type === 'cell') {// if (this.parent.currentView !== 'TimelineYear') {
        //     EventHandler.add(element, 'click', this.onCellClick, this);
        // } else {
        //     EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);
        //     if (!this.parent.isAdaptive) {
        //         EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
        //     }
        // }
      } else {
        sf.base.EventHandler.add(element, 'scroll', this.onContentScroll, this);
      }
    };

    Year.prototype.destroy = function () {
      if (this.parent.isDestroyed) {
        return;
      }

      if (this.element) {
        this.element = null;
      }
    };

    return Year;
  }(ViewBase);
  /**
   * Work cell interactions
   */


  var WorkCellInteraction =
  /** @class */
  function () {
    function WorkCellInteraction(parent) {
      this.parent = parent;
    }

    WorkCellInteraction.prototype.cellMouseDown = function (e) {
      if (this.isPreventAction(e)) {
        return;
      }

      this.parent.onCellMouseDown(e);
    };

    WorkCellInteraction.prototype.cellClick = function (e) {
      if (this.isPreventAction(e)) {
        return;
      }

      var queryStr = '.' + WORK_CELLS_CLASS + ',.' + ALLDAY_CELLS_CLASS + ',.' + HEADER_CELLS_CLASS;
      var target = sf.base.closest(e.target, queryStr);

      if (sf.base.isNullOrUndefined(target)) {
        return;
      }

      if (!sf.base.isNullOrUndefined(sf.base.closest(e.target, '.' + NEW_EVENT_CLASS))) {
        //this.parent.eventWindow.openEditor(this.parent.activeCellsData, 'Add');
        this.parent.dotNetRef.invokeMethodAsync('OnOpenEditor', this.parent.activeCellsData, 'Add');
        return;
      }

      var navigateEle = sf.base.closest(e.target, '.' + NAVIGATE_CLASS);
      var navigateView = this.parent.getNavigateView();
      var sameView = this.parent.options.currentView === navigateView;

      if (sf.base.isNullOrUndefined(navigateEle) || sameView) {
        //isNullOrUndefined(this.parent.viewOptions[navigateView.charAt(0).toLowerCase() + navigateView.slice(1)])) {
        if (this.parent.activeViewOptions.readonly && this.parent.options.currentView !== 'MonthAgenda') {
          //this.parent.quickPopup.quickPopupHide();
          return;
        }

        if (this.parent.isAdaptive && (e.target.classList.contains(MORE_INDICATOR_CLASS) || sf.base.closest(e.target, '.' + MORE_INDICATOR_CLASS))) {
          return;
        }

        var isWorkCell = target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS);

        if (isWorkCell && e.shiftKey && e.which === 1 && this.parent.keyboardInteractionModule) {
          this.parent.keyboardInteractionModule.onMouseSelection(e);
          return;
        }

        this.parent.activeCellsData = this.parent.getCellDetails(target);
        this.parent.currentCell = target;
        var args = sf.base.extend(this.parent.activeCellsData, {
          cancel: false,
          event: e,
          name: 'cellClick'
        });
        this.parent.dotNetRef.invokeMethodAsync('TriggerCellClick', args);
      } else {
        var date = this.parent.getDateFromElement(target);

        if (!sf.base.isNullOrUndefined(date) && !this.parent.isAdaptive) {//this.parent.dotNetRef.invokeMethodAsync('OnViewNavigate', date, this.parent.getNavigateView());
          //this.parent.setScheduleProperties({ selectedDate: date });
          //this.parent.changeView(this.parent.getNavigateView(), e);
        }
      }
    };

    WorkCellInteraction.prototype.cellDblClick = function (e) {
      if (this.parent.activeViewOptions.readonly || this.isPreventAction(e)) {
        return;
      }

      var args = sf.base.extend(this.parent.activeCellsData, {
        cancel: false,
        event: e,
        name: 'OnCellDoubleClick'
      });
      this.parent.dotNetRef.invokeMethodAsync('OnOpenEditor', args, 'Add'); // this.parent.trigger(event.cellDoubleClick, args, (clickArgs: CellClickEventArgs) => {
      //     clickArgs = this.serializingData(clickArgs, e);
      //     let date: Date = new Date(clickArgs.startTime.getTime());
      //     if (!this.parent.isMinMaxDate(new Date(date.setHours(0, 0, 0, 0)))) {
      //         return;
      //     }
      //     if (!clickArgs.cancel) {
      //         this.parent.eventWindow.openEditor(this.parent.activeCellsData, 'Add');
      //     }
      // });
    }; // private serializingData(clickArgs: CellClickEventArgs, e: Event): CellClickEventArgs {
    //     if (isBlazor()) {
    //         clickArgs.startTime = this.parent.getDateTime(clickArgs.startTime);
    //         clickArgs.endTime = this.parent.getDateTime(clickArgs.endTime);
    //         if (clickArgs.element) {
    //             clickArgs.element = getElement(clickArgs.element);
    //         }
    //         if (clickArgs.event) {
    //             clickArgs.event = e;
    //         }
    //     }
    //     return clickArgs;
    // }


    WorkCellInteraction.prototype.isPreventAction = function (e) {
      if (sf.base.closest(e.target, '.' + NAVIGATE_CLASS)) {
        return false;
      }

      if (sf.base.closest(e.target, '.' + APPOINTMENT_WRAPPER_CLASS) && !sf.base.closest(e.target, '.' + MORE_INDICATOR_CLASS)) {
        return true;
      }

      var target = sf.base.closest(e.target, '.' + APPOINTMENT_CLASS + ',.' + RESOURCE_GROUP_CELLS_CLASS);

      if (!sf.base.isNullOrUndefined(target)) {
        return true;
      }

      target = sf.base.closest(e.target, '.' + HEADER_CELLS_CLASS);

      if (this.parent.isTimelineView() && !sf.base.isNullOrUndefined(target)) {
        return true;
      }

      return false;
    };

    return WorkCellInteraction;
  }();
  /**
   * Keyboard interaction
   */


  var KeyboardInteraction =
  /** @class */
  function () {
    function KeyboardInteraction(parent) {
      this.selectedCells = [];
      this.keyConfigs = {
        downArrow: 'downarrow',
        upArrow: 'uparrow',
        rightArrow: 'rightarrow',
        leftArrow: 'leftarrow',
        shiftDownArrow: 'shift+downarrow',
        shiftUpArrow: 'shift+uparrow',
        shiftRightArrow: 'shift+rightarrow',
        shiftLeftArrow: 'shift+leftarrow',
        ctrlLeftArrow: 'ctrl+leftarrow',
        ctrlRightArrow: 'ctrl+rightarrow',
        altOne: 'alt+1',
        altTwo: 'alt+2',
        altThree: 'alt+3',
        altFour: 'alt+4',
        altFive: 'alt+5',
        altSix: 'alt+6',
        altSeven: 'alt+7',
        altEight: 'alt+8',
        altNine: 'alt+9',
        enter: 'enter',
        escape: 'escape',
        delete: 'delete',
        home: 'home',
        pageUp: 'pageup',
        pageDown: 'pagedown',
        tab: 'tab',
        shiftTab: 'shift+tab'
      };
      this.parent = parent;
      this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;
      this.keyboardModule = new sf.base.KeyboardEvents(this.parent.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: 'keydown'
      });
    }

    KeyboardInteraction.prototype.keyActionHandler = function (e) {
      switch (e.action) {
        case 'downArrow':
        case 'shiftDownArrow':
          this.processDown(e, e.shiftKey);
          break;

        case 'upArrow':
        case 'shiftUpArrow':
          this.processUp(e, e.shiftKey);
          break;

        case 'leftArrow':
        case 'shiftLeftArrow':
          this.processLeft(e, e.shiftKey);
          break;

        case 'rightArrow':
        case 'shiftRightArrow':
          this.processRight(e, e.shiftKey);
          break;

        case 'ctrlLeftArrow':
          // this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), e);
          // if (this.parent.headerModule) {
          //     (this.parent.headerModule.element.querySelector('.e-prev button') as HTMLElement).focus();
          // }
          break;

        case 'ctrlRightArrow':
          // this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), e);
          // if (this.parent.headerModule) {
          //     (this.parent.headerModule.element.querySelector('.e-next button') as HTMLElement).focus();
          // }
          break;

        case 'altOne':
        case 'altTwo':
        case 'altThree':
        case 'altFour':
        case 'altFive':
        case 'altSix':
        case 'altSeven':
        case 'altEight':
        case 'altNine':
          this.processViewNavigation(e);
          break;

        case 'enter':
          this.processEnter(e);
          break;

        case 'home':
          this.focusFirstCell();
          break;

        case 'tab':
        case 'shiftTab':
          this.processTab(e, e.shiftKey);
          break;

        case 'delete':
          this.processDelete(e);
          break;

        case 'escape':
          this.processEscape();
      }
    };

    KeyboardInteraction.prototype.onCellMouseDown = function (e) {
      if (e.shiftKey) {
        return;
      }

      this.initialTarget = this.getClosestCell(e);

      if (this.parent.activeViewOptions.readonly || this.parent.options.currentView === 'MonthAgenda' || !this.initialTarget) {
        return;
      }

      if (e.target.classList.contains(WORK_CELLS_CLASS) && e.which !== 3) {
        this.parent.removeSelectedClass();
        sf.base.EventHandler.add(this.parent.getContentTable(), 'mousemove', this.onMouseSelection, this);
        sf.base.EventHandler.add(this.parent.getContentTable(), 'mouseup', this.onMoveup, this);
      }

      if (e.target.classList.contains(ALLDAY_CELLS_CLASS) && e.which !== 3) {
        this.parent.removeSelectedClass();
        var allDayRow = this.parent.getAllDayRow();
        sf.base.EventHandler.add(allDayRow, 'mousemove', this.onMouseSelection, this);
        sf.base.EventHandler.add(allDayRow, 'mouseup', this.onMoveup, this);
      }
    };

    KeyboardInteraction.prototype.onMouseSelection = function (e) {
      var appointments = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));
      sf.base.addClass(appointments, 'e-allow-select');
      var selectionEdges = this.parent.boundaryValidation(e.pageY, e.pageX);

      if (selectionEdges.bottom || selectionEdges.top || selectionEdges.left || selectionEdges.right) {
        var parent_1 = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);
        var yInBounds = parent_1.offsetHeight <= parent_1.scrollHeight && parent_1.scrollTop >= 0 && parent_1.scrollTop + parent_1.offsetHeight <= parent_1.scrollHeight;
        var xInBounds = parent_1.offsetWidth <= parent_1.scrollWidth && parent_1.scrollLeft >= 0 && parent_1.scrollLeft + parent_1.offsetWidth <= parent_1.scrollWidth;

        if (yInBounds && (selectionEdges.top || selectionEdges.bottom)) {
          parent_1.scrollTop += selectionEdges.top ? -e.target.offsetHeight : e.target.offsetHeight;
        }

        if (xInBounds && (selectionEdges.left || selectionEdges.right)) {
          parent_1.scrollLeft += selectionEdges.left ? -e.target.offsetWidth : e.target.offsetWidth;
        }
      }

      var target = this.getClosestCell(e);

      if (target) {
        this.selectCells(true, target);
      }
    };

    KeyboardInteraction.prototype.getClosestCell = function (e) {
      return sf.base.closest(e.target, '.' + WORK_CELLS_CLASS + ',.' + ALLDAY_CELLS_CLASS);
    };

    KeyboardInteraction.prototype.onMoveup = function (e) {
      var appointments = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));
      sf.base.removeClass(appointments, 'e-allow-select');

      if (e.target.classList.contains(WORK_CELLS_CLASS)) {
        sf.base.EventHandler.remove(this.parent.getContentTable(), 'mousemove', this.onMouseSelection);
        sf.base.EventHandler.remove(this.parent.getContentTable(), 'mouseup', this.onMoveup);
      }

      if (e.target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var allDayRow = this.parent.getAllDayRow();
        sf.base.EventHandler.remove(allDayRow, 'mousemove', this.onMouseSelection);
        sf.base.EventHandler.remove(allDayRow, 'mouseup', this.onMoveup);
      }

      if (this.isPreventAction(e)) {
        return;
      }

      var queryStr = '.' + WORK_CELLS_CLASS + ',.' + ALLDAY_CELLS_CLASS + ',.' + HEADER_CELLS_CLASS;
      var target = sf.base.closest(e.target, queryStr); // this.parent.activeCellsData = this.getSelectedElements(target);
      // if (this.parent.options.quickInfoOnSelectionEnd) {
      //     let cellArgs: CellClickEventArgs =
      //         <CellClickEventArgs>extend(this.parent.activeCellsData, { cancel: false, event: e, name: 'cellClick' });
      //     this.parent.notify(event.cellClick, cellArgs);
      // }
    };

    KeyboardInteraction.prototype.processEnter = function (e) {
      if (this.parent.activeViewOptions.readonly || this.isPreventAction(e)) {
        return;
      }

      var target = e.target;

      if (sf.base.closest(target, '.' + POPUP_WRAPPER_CLASS)) {
        if (target.classList.contains(QUICK_POPUP_EVENT_DETAILS_CLASS) || target.classList.contains(EVENT_CREATE_CLASS) || target.classList.contains(EDIT_EVENT_CLASS) || target.classList.contains(DELETE_EVENT_CLASS) || target.classList.contains(CLOSE_CLASS)) {
          target.click();
          e.preventDefault();
        } else if (target.classList.contains(SUBJECT_CLASS)) {
          this.parent.element.querySelector('.' + EVENT_CREATE_CLASS).click();
          e.preventDefault();
        }

        return;
      } // if (target.classList.contains(cls.WORK_CELLS_CLASS) || target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {
      //     this.parent.activeCellsData = this.getSelectedElements(target);
      //     let args: CellClickEventArgs = <CellClickEventArgs>extend(this.parent.activeCellsData, { cancel: false, event: e });
      //     if (this.parent.allowInline) {
      //         let inlineArgs: InlineClickArgs = {
      //             element: args.element as HTMLElement,
      //             groupIndex: args.groupIndex, type: 'Cell'
      //         };
      //         this.parent.notify(event.inlineClick, inlineArgs);
      //     } else {
      //         this.parent.notify(event.cellClick, args);
      //     }
      //     return;
      // }
      // if (target.classList.contains(cls.INLINE_SUBJECT_CLASS)) {
      //     this.parent.inlineModule.inlineCrudActions(target);
      //     return;
      // }


      if (target.classList.contains(APPOINTMENT_CLASS) || target.classList.contains(MORE_EVENT_CLOSE_CLASS) || target.classList.contains(ALLDAY_APPOINTMENT_SECTION_CLASS) || target.classList.contains(MORE_INDICATOR_CLASS)) {
        target.click();
        return;
      }

      if (target.classList.contains(MORE_EVENT_HEADER_DATE_CLASS)) {
        // this.parent.setScheduleProperties({ selectedDate: this.parent.getDateFromElement(target) });
        // this.parent.changeView(this.parent.getNavigateView(), e);
        this.processEscape();
        return;
      }
    };

    KeyboardInteraction.prototype.getSelectedElements = function (target) {
      var cellDetails;

      if (this.selectedCells.length > 1 && target.classList.contains(SELECTED_CELL_CLASS)) {
        var start = this.parent.getCellDetails(this.selectedCells[0]);
        var end = this.parent.getCellDetails(this.selectedCells.slice(-1)[0]);
        start.endTime = end.endTime;
        start.element = target;
        cellDetails = start;
      } else {
        cellDetails = this.parent.getCellDetails(target);
      }

      return cellDetails;
    };

    KeyboardInteraction.prototype.getCells = function (isInverseTable, start, end) {
      var tableEle = this.parent.getContentTable();
      var cells = [].slice.call(tableEle.querySelectorAll('td'));
      var maxRow = tableEle.rows.length;
      var maxColumn = tableEle.rows[0].cells.length;

      if (start.classList.contains(ALLDAY_CELLS_CLASS)) {
        var allDayRow = this.parent.getAllDayRow();
        cells = [].slice.call(allDayRow.cells);
        maxRow = 1;
        maxColumn = allDayRow.cells.length;
      }

      var startIndex = cells.indexOf(start);
      var endIndex = cells.indexOf(end);
      var inverseCells = [];

      if (isInverseTable) {
        for (var i = 0; i < maxColumn; i++) {
          for (var j = 0; j < maxRow; j++) {
            inverseCells.push(cells[maxColumn * j + i]);
          }
        }

        startIndex = inverseCells.indexOf(start);
        endIndex = inverseCells.indexOf(end);
      }

      if (startIndex > endIndex) {
        var temp = startIndex;
        startIndex = endIndex;
        endIndex = temp;
      }

      var sCells = isInverseTable ? inverseCells : cells;
      return sCells.slice(startIndex, endIndex + 1);
    };

    KeyboardInteraction.prototype.focusFirstCell = function () {
      if (this.parent.options.currentView === 'Agenda') {
        var focusCell = this.parent.getContentTable().querySelector('.' + AGENDA_CELLS_CLASS);
        focusCell.setAttribute('tabindex', '0');
        focusCell.focus();
        return;
      }

      this.parent.eventBase.removeSelectedAppointmentClass();

      if (this.parent.isTimelineView()) {
        var cell = this.parent.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tr:not(.' + HIDDEN_CLASS + ') .' + WORK_CELLS_CLASS + ':not(.' + RESOURCE_GROUP_CELLS_CLASS + ')');
        this.selectCells(false, cell);
      } else {
        this.selectCells(false, this.parent.getWorkCellElements()[0]);
      }
    };

    KeyboardInteraction.prototype.isInverseTableSelect = function () {
      return this.parent.activeView.isInverseTableSelect;
    };

    KeyboardInteraction.prototype.selectCells = function (isMultiple, targetCell) {
      this.parent.removeSelectedClass();
      var target = targetCell instanceof Array ? targetCell.slice(-1)[0] : targetCell;

      if (isMultiple) {
        var initialId = void 0;
        var views = ['Day', 'Week', 'WorkWeek', 'Month', 'TimelineDay', 'TimelineWeek', 'TimelineWorkWeek', 'TimelineMonth'];

        if (!this.parent.options.allowMultiRowSelection && views.indexOf(this.parent.options.currentView) > -1) {
          target = target.parentElement.children[this.initialTarget.cellIndex];
        }

        var selectedCells = this.getCells(this.isInverseTableSelect(), this.initialTarget, target);

        if (this.parent.activeViewOptions.group.resources.length > 0) {
          initialId = this.initialTarget.getAttribute('data-group-index');
          var resourceSelectedCells = [];

          for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {
            var cell = selectedCells_1[_i];

            if (cell.getAttribute('data-group-index') === initialId) {
              resourceSelectedCells.push(cell);
            }
          }

          selectedCells = resourceSelectedCells;
        }

        if (!this.parent.options.allowMultiCellSelection) {
          selectedCells = [this.initialTarget];
        }

        this.selectedCells = selectedCells;

        if (selectedCells.length > 2 && !target.classList.contains(ALLDAY_CELLS_CLASS)) {
          var allDayCells = this.getAllDayCells(selectedCells);

          if (this.parent.activeViewOptions.group.resources.length > 0) {
            var resourceAllDayCells = [];

            for (var _a = 0, allDayCells_1 = allDayCells; _a < allDayCells_1.length; _a++) {
              var cell = allDayCells_1[_a];

              if (cell.getAttribute('data-group-index') === initialId) {
                resourceAllDayCells.push(cell);
              }
            }

            allDayCells = resourceAllDayCells;
          }

          selectedCells = selectedCells.concat(allDayCells);
        }

        if (target.getAttribute('data-group-index') !== initialId && this.parent.activeViewOptions.group.resources.length > 0) {
          target = this.selectedCells[this.selectedCells.length - 1];
        }

        this.parent.addSelectedClass(selectedCells, target);
      } else {
        this.initialTarget = target;
        this.selectedCells = [target];
        this.parent.addSelectedClass([target], target);
      }
    };

    KeyboardInteraction.prototype.selectAppointment = function (isReverse, target) {
      var appointments = this.getAppointmentElements();

      if (appointments.length < 0) {
        return;
      }

      this.parent.eventBase.removeSelectedAppointmentClass();
      var nextAppEle;

      if (target.classList.contains(APPOINTMENT_CLASS)) {
        var targetIndex = appointments.indexOf(target);
        nextAppEle = appointments[isReverse ? targetIndex - 1 : targetIndex + 1];
      } else {
        nextAppEle = isReverse ? appointments[appointments.length - 1] : appointments[0];
      }

      if (nextAppEle) {
        this.parent.eventBase.addSelectedAppointments([nextAppEle]);
        nextAppEle.focus();
        sf.base.addClass([nextAppEle], AGENDA_SELECTED_CELL);
      }
    };

    KeyboardInteraction.prototype.selectAppointmentElementFromWorkCell = function (isReverse, target) {
      this.parent.eventBase.removeSelectedAppointmentClass();
      this.parent.removeSelectedClass(); // if (target.classList.contains(cls.WORK_CELLS_CLASS) || target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {
      //     let appointmentElements: HTMLElement[] = this.getUniqueAppointmentElements();
      //     let filteredElements: HTMLElement[] = [];
      //     let selectedDate: number = this.parent.getDateFromElement(target).getTime();
      //     let selectedSeriesEvents: Object[] = this.parent.eventsProcessed.filter((eventObject: { [key: string]: object }) => {
      //         return (!isReverse ? ((<Date>eventObject[this.parent.eventFields.startTime]).getTime() >= selectedDate) :
      //             ((<Date>eventObject[this.parent.eventFields.startTime]).getTime() <= selectedDate));
      //     });
      //     selectedSeriesEvents.filter((event: { [key: string]: object }) => {
      //         appointmentElements.filter((element: HTMLElement) => {
      //             if (JSON.stringify(event.Guid) === JSON.stringify(element.getAttribute('data-guid'))) {
      //                 filteredElements.push(element);
      //             }
      //         });
      //     });
      //     if (filteredElements.length > 0) {
      //         let selectedElement: Element = isReverse ? filteredElements[filteredElements.length - 1] : filteredElements[0];
      //         let focusElements: HTMLElement[] = this.getAppointmentElementsByGuid(selectedElement.getAttribute('data-guid'));
      //         this.parent.eventBase.addSelectedAppointments(focusElements);
      //         (focusElements[focusElements.length - 1]).focus();
      //     }
      // }
    };

    KeyboardInteraction.prototype.getAllDayCells = function (cells) {
      var allDayRow = this.parent.getAllDayRow();

      if (!allDayRow) {
        return [];
      }

      var startCell = cells[0];
      var endCell = cells[cells.length - 1];
      var start = this.parent.getCellDetails(startCell);
      var end = this.parent.getCellDetails(endCell);

      if (end.endTime.getTime() - start.startTime.getTime() >= MS_PER_DAY) {
        var allDayCells = [].slice.call(allDayRow.cells);
        return allDayCells.slice(startCell.cellIndex, endCell.cellIndex + 1);
      }

      return [];
    };

    KeyboardInteraction.prototype.getAppointmentElements = function () {
      return [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));
    };

    KeyboardInteraction.prototype.getAppointmentElementsByGuid = function (guid) {
      return [].slice.call(this.parent.element.querySelectorAll('div[data-guid="' + guid + '"]'));
    };

    KeyboardInteraction.prototype.getUniqueAppointmentElements = function () {
      var appointments = this.getAppointmentElements();
      var appointmentElements = [];
      appointments.map(function (value) {
        return value.getAttribute('data-guid');
      }).filter(function (value, index, self) {
        if (self.indexOf(value) === index) {
          appointmentElements.push(appointments[index]);
        }
      });
      return appointmentElements;
    };

    KeyboardInteraction.prototype.getWorkCellFromAppointmentElement = function (target) {
      // let selectedObject: Object = this.parent.eventBase.getEventByGuid(target.getAttribute('data-guid'));
      // return this.parent.eventBase.selectWorkCellByTime([selectedObject]) as HTMLTableCellElement;
      return null;
    };

    KeyboardInteraction.prototype.processViewNavigation = function (e) {
      var index = parseInt(e.key, 10) - 1; // if (index < this.parent.views.length) {
      //     let view: View = this.parent.viewCollections[index].option;
      //     this.parent.changeView(view, e, undefined, index);
      //     if (this.parent.headerModule) {
      //         (this.parent.headerModule.element.querySelector('.e-active-view button') as HTMLElement).focus();
      //     }
      // }
    };

    KeyboardInteraction.prototype.processUp = function (e, isMultiple) {
      if (isMultiple && (this.parent.isTimelineView() || this.parent.options.currentView === 'MonthAgenda')) {
        return;
      }

      var target = e.target;
      var selectedElements = this.parent.getSelectedElements();
      var selectedEventElements = this.parent.eventBase.getSelectedAppointments();
      var moreEventWrapper = this.parent.element.querySelector('.' + MORE_POPUP_WRAPPER_CLASS);
      var quickPopupWrapper = this.getQuickPopupElement();

      if (selectedElements.length > 0 && !e.target.classList.contains(WORK_CELLS_CLASS)) {
        target = selectedElements[selectedElements.length - 1];
      }

      if (selectedEventElements.length > 0 && !moreEventWrapper.classList.contains(POPUP_OPEN) && !quickPopupWrapper.classList.contains(POPUP_OPEN) && ['Day', 'Week', 'WorkWeek', 'Month'].indexOf(this.parent.options.currentView) !== -1) {
        target = this.getWorkCellFromAppointmentElement(selectedEventElements[selectedEventElements.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();
      }

      if (!target) {
        return;
      }

      if (target.classList.contains(WORK_CELLS_CLASS) && !this.parent.element.querySelector('.' + POPUP_OPEN)) {
        var tableRows = this.parent.getTableRows();
        var curRowIndex = tableRows.indexOf(target.parentElement);

        if (curRowIndex > 0 && curRowIndex < tableRows.length) {
          this.selectCells(isMultiple, tableRows[curRowIndex - 1].cells[target.cellIndex]);
        }
      } else if (this.parent.options.currentView === 'Agenda' || this.parent.options.currentView === 'MonthAgenda') {
        this.selectAppointment(true, target);
      }
    };

    KeyboardInteraction.prototype.processDown = function (e, isMultiple) {
      if (isMultiple && (this.parent.isTimelineView() || this.parent.options.currentView === 'MonthAgenda')) {
        return;
      }

      var target = e.target;
      var selectedCells = this.parent.getSelectedElements();
      var selectedElements = this.parent.eventBase.getSelectedAppointments();
      var moreEventWrapper = this.parent.element.querySelector('.' + MORE_POPUP_WRAPPER_CLASS);
      var quickPopupWrapper = this.getQuickPopupElement();

      if (selectedCells.length > 0 && !e.target.classList.contains(WORK_CELLS_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
      }

      if (selectedElements.length > 0 && !moreEventWrapper.classList.contains(POPUP_OPEN) && !quickPopupWrapper.classList.contains(POPUP_OPEN) && ['Day', 'Week', 'WorkWeek', 'Month'].indexOf(this.parent.options.currentView) !== -1) {
        target = this.getWorkCellFromAppointmentElement(selectedElements[selectedElements.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();
      }

      var tableRows = this.parent.getTableRows();

      if (!target) {
        return;
      }

      if (target.classList.contains(WORK_CELLS_CLASS) && !this.parent.element.querySelector('.' + POPUP_OPEN)) {
        var curRowIndex = tableRows.indexOf(target.parentElement);

        if (curRowIndex >= 0 && curRowIndex < tableRows.length - 1) {
          this.selectCells(isMultiple, tableRows[curRowIndex + 1].cells[target.cellIndex]);
        }
      } else if (this.parent.options.currentView === 'Agenda' || this.parent.options.currentView === 'MonthAgenda') {
        this.selectAppointment(false, target);
      }
    };

    KeyboardInteraction.prototype.processLeftRight = function (target) {
      var tableEle = this.parent.getContentTable();
      var curRowIndex = target.parentNode.sectionRowIndex;
      var key = {
        element: tableEle,
        rowIndex: curRowIndex,
        columnIndex: target.cellIndex,
        maxIndex: tableEle.rows[curRowIndex].cells.length
      };
      return key;
    };

    KeyboardInteraction.prototype.getQuickPopupElement = function () {
      return (this.parent.isAdaptive ? document.body : this.parent.element).querySelector('.' + POPUP_WRAPPER_CLASS);
    };

    KeyboardInteraction.prototype.isCancelLeftRightAction = function (e, isMultiple) {
      if (this.parent.options.currentView === 'Agenda' || isMultiple && this.parent.options.currentView === 'MonthAgenda') {
        return true;
      }

      if (this.isPreventAction(e) && isMultiple) {
        return true;
      }

      var moreEventWrapper = this.parent.element.querySelector('.' + MORE_POPUP_WRAPPER_CLASS);
      var quickPopupWrapper = this.getQuickPopupElement();

      if (moreEventWrapper.classList.contains(POPUP_OPEN) || quickPopupWrapper.classList.contains(POPUP_OPEN)) {
        return true;
      }

      return false;
    };

    KeyboardInteraction.prototype.processRight = function (e, isMultiple) {
      if (this.isCancelLeftRightAction(e, isMultiple)) {
        return;
      }

      var selectedCells = this.parent.getSelectedElements();
      var targetCell;
      var selectedAppointments = this.parent.eventBase.getSelectedAppointments();
      var target = e.target;

      if (selectedCells.length > 0 && !target.classList.contains(WORK_CELLS_CLASS) && !target.classList.contains(ALLDAY_CELLS_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
      }

      if (selectedAppointments.length > 0) {
        target = this.getWorkCellFromAppointmentElement(selectedAppointments[selectedAppointments.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();

        if (!target) {
          return;
        }
      }

      if (target.classList.contains(WORK_CELLS_CLASS) && e.target.classList.contains(WORK_CELLS_CLASS)) {
        var key = this.processLeftRight(target);

        if (key.columnIndex >= 0 && key.columnIndex < key.maxIndex - 1) {
          targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex].cells[target.cellIndex + 1], 'right');

          if (!sf.base.isNullOrUndefined(targetCell)) {
            this.selectCells(isMultiple, targetCell);
          }
        } else if (key.columnIndex === key.maxIndex - 1) {
          if (!this.isInverseTableSelect() && key.rowIndex < key.element.rows.length - 1) {
            targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex + 1].cells[0], 'right');

            if (!sf.base.isNullOrUndefined(targetCell)) {
              this.selectCells(isMultiple, targetCell);
            }
          } else if (!isMultiple) {
            var rowIndex = this.isInverseTableSelect() ? key.rowIndex : 0; // this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), e);
            // let tableEle: HTMLTableElement = this.parent.getContentTable() as HTMLTableElement;
            // this.selectCells(false, tableEle.rows[rowIndex].cells[0]);
          }
        }
      } else if (target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var curColIndex = target.cellIndex;
        var allDayRow = this.parent.getAllDayRow();
        var maxColIndex = allDayRow.cells.length;

        if (curColIndex >= 0 && curColIndex < maxColIndex - 1) {
          this.selectCells(isMultiple, allDayRow.cells[curColIndex + 1]);
        } else if (curColIndex === maxColIndex - 1 && !isMultiple) {// this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), e);
          // let allDayRow: HTMLTableRowElement = <HTMLTableRowElement>this.parent.getAllDayRow();
          // this.selectCells(false, allDayRow.cells[0]);
        }
      }
    };

    KeyboardInteraction.prototype.processLeft = function (e, isMultiple) {
      if (this.isCancelLeftRightAction(e, isMultiple)) {
        return;
      }

      var target = e.target;
      var selectedCells = this.parent.getSelectedElements();
      var targetCell;

      if (selectedCells.length > 0 && !target.classList.contains(WORK_CELLS_CLASS) && !target.classList.contains(ALLDAY_CELLS_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
      }

      var selectedElements = this.parent.eventBase.getSelectedAppointments();

      if (selectedElements.length > 0) {
        target = this.getWorkCellFromAppointmentElement(selectedElements[selectedElements.length - 1]);
        this.parent.eventBase.removeSelectedAppointmentClass();

        if (!target) {
          return;
        }
      }

      if (e.target.classList.contains(WORK_CELLS_CLASS) && target.classList.contains(WORK_CELLS_CLASS)) {
        var key = this.processLeftRight(target);

        if (key.columnIndex > 0 && key.columnIndex < key.maxIndex) {
          targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex].cells[target.cellIndex - 1], 'left');

          if (!sf.base.isNullOrUndefined(targetCell)) {
            this.selectCells(isMultiple, targetCell);
          }
        } else if (key.columnIndex === 0) {
          if (!this.isInverseTableSelect() && key.rowIndex > 0) {
            targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex - 1].cells[key.maxIndex - 1], 'left');

            if (!sf.base.isNullOrUndefined(targetCell)) {
              this.selectCells(isMultiple, targetCell);
            }
          } else if (!isMultiple) {// this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), e);
            // let tableEle: HTMLTableElement = this.parent.getContentTable() as HTMLTableElement;
            // let rowIndex: number = this.isInverseTableSelect() ? key.rowIndex : tableEle.rows.length - 1;
            // this.selectCells(false, tableEle.rows[rowIndex].cells[key.maxIndex - 1]);
          }
        }
      } else if (target.classList.contains(ALLDAY_CELLS_CLASS)) {
        var curColIndex = target.cellIndex;
        var allDayRow = this.parent.getAllDayRow();
        var maxColIndex = allDayRow.cells.length;

        if (curColIndex > 0 && curColIndex < maxColIndex) {
          this.selectCells(isMultiple, allDayRow.cells[curColIndex - 1]);
        } else if (curColIndex === 0 && !isMultiple) {// this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), e);
          // let allDayRow: HTMLTableRowElement = <HTMLTableRowElement>this.parent.getAllDayRow();
          // this.selectCells(false, allDayRow.cells[maxColIndex - 1]);
        }
      }
    };

    KeyboardInteraction.prototype.calculateNextPrevDate = function (currentCell, target, type) {
      var initialId = this.initialTarget.getAttribute('data-group-index');

      if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.options.currentView === 'Month') {
        if (currentCell && target && target.getAttribute('data-group-index') !== initialId) {
          var currentDate = this.parent.getDateFromElement(currentCell);
          var nextPrevDate = type === 'right' ? new Date(currentDate.setDate(currentDate.getDate() + 1)) : new Date(currentDate.setDate(currentDate.getDate() - 1));
          target = [].slice.call(this.parent.element.querySelectorAll('td[data-date="' + this.parent.getMsFromDate(nextPrevDate).toString() + '"]' + '[data-group-index="' + initialId + '"]'))[0];
        }
      }

      return target;
    };

    KeyboardInteraction.prototype.getFocusableElements = function (container) {
      var queryString = 'a[href]:not([tabindex="-1"]),input:not([disabled]):not([tabindex="-1"]),' + 'textarea:not([disabled]):not([tabindex="-1"]),button:not([disabled]):not([tabindex="-1"]),' + 'select:not([disabled]):not([tabindex="-1"]),[tabindex]:not([tabindex="-1"]),[contentEditable=true]:not([tabindex="-1"])';
      return [].slice.call(container.querySelectorAll(queryString));
    };

    KeyboardInteraction.prototype.processTabOnPopup = function (e, popupElement) {
      var _this = this;

      var focusableElements = this.getFocusableElements(popupElement);
      focusableElements = focusableElements.filter(function (element) {
        var footerEle = _this.parent.element.querySelector('.' + POPUP_FOOTER_CLASS);

        if (footerEle && footerEle.offsetParent) {
          return !(element.classList.contains(EDIT_CLASS) || element.classList.contains(DELETE_CLASS));
        } else {
          return !(element.classList.contains(EDIT_EVENT_CLASS) || element.classList.contains(DELETE_EVENT_CLASS));
        }
      });
      var firstEle = focusableElements[0];
      var lastEle = focusableElements[focusableElements.length - 1];

      if (!sf.base.isNullOrUndefined(lastEle) && document.activeElement === lastEle && !e.shiftKey) {
        e.preventDefault();
        firstEle.focus();
      }

      if (!sf.base.isNullOrUndefined(firstEle) && document.activeElement === firstEle && e.shiftKey) {
        e.preventDefault();
        lastEle.focus();
      }
    };

    KeyboardInteraction.prototype.processTab = function (e, isReverse) {
      var target = e.target;
      var popupWrapper = sf.base.closest(target, '.' + POPUP_WRAPPER_CLASS + ',.' + MORE_POPUP_WRAPPER_CLASS);

      if (popupWrapper && popupWrapper.classList.contains(POPUP_OPEN)) {
        if (popupWrapper.classList.contains(MORE_POPUP_WRAPPER_CLASS)) {
          this.parent.eventBase.removeSelectedAppointmentClass();
        }

        this.processTabOnPopup(e, popupWrapper);
        return;
      }

      if (target.classList.contains(ROOT)) {
        this.parent.eventBase.removeSelectedAppointmentClass();
        return;
      }

      if (target.classList.contains(APPOINTMENT_CLASS)) {
        var appointments = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));
        var selectedAppointments = this.parent.eventBase.getSelectedAppointments();

        if (selectedAppointments.length > 0) {
          target = selectedAppointments[selectedAppointments.length - 1];
        }

        this.parent.eventBase.removeSelectedAppointmentClass();

        if (!isReverse && target.getAttribute('data-guid') === appointments[appointments.length - 1].getAttribute('data-guid') || isReverse && target.getAttribute('data-guid') === appointments[0].getAttribute('data-guid')) {
          return;
        }

        if (this.parent.options.currentView === 'Agenda' || this.parent.options.currentView === 'MonthAgenda') {
          this.selectAppointment(isReverse, target);
          e.preventDefault();
        }

        return;
      }

      var selectedCells = this.parent.getSelectedElements();

      if (selectedCells.length > 0 && !target.classList.contains(APPOINTMENT_CLASS)) {
        target = selectedCells[selectedCells.length - 1];
        this.selectAppointmentElementFromWorkCell(isReverse, target);
        e.preventDefault();
        return;
      }
    };

    KeyboardInteraction.prototype.processDelete = function (e) {
      var activeEle = document.activeElement; // if (this.parent.options.currentView === 'MonthAgenda') {
      //     let selectedEle: object[] = this.parent.eventBase.getSelectedEvents().element as object[];
      //     activeEle = <Element>((selectedEle && isNullOrUndefined(selectedEle.length)) ? selectedEle : selectedEle[0]);
      // }
      // if (activeEle && activeEle.classList.contains(cls.APPOINTMENT_CLASS)) {
      //     addClass([activeEle], cls.APPOINTMENT_BORDER);
      //     this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();
      //     if (this.parent.activeViewOptions.readonly || activeEle.classList.contains(cls.READ_ONLY)) {
      //         return;
      //     }
      //     this.parent.quickPopup.deleteClick();
      // }
    };

    KeyboardInteraction.prototype.processEscape = function () {
      this.parent.onClosePopup();
      this.parent.onMoreEventPopupClose(); //this.parent.quickPopup.morePopup.hide();
      // if (this.parent.headerModule) {
      //     this.parent.headerModule.hideHeaderPopup();
      // }
      // if (this.parent.inlineModule) {
      //     this.parent.inlineModule.removeInlineAppointmentElement();
      // }
    };

    KeyboardInteraction.prototype.isPreventAction = function (e) {
      var target = sf.base.closest(e.target, '.' + RESOURCE_GROUP_CELLS_CLASS);

      if (this.parent.isTimelineView() && !sf.base.isNullOrUndefined(target)) {
        return true;
      }

      return false;
    };

    KeyboardInteraction.prototype.destroy = function () {
      this.keyboardModule.destroy();
    };

    return KeyboardInteraction;
  }();
  /**
   * EventBase for appointment rendering
   */


  var EventBase =
  /** @class */
  function () {
    function EventBase(parent) {
      this.slots = [];
      this.isDoubleTapped = false;
      this.parent = parent;
    }

    EventBase.prototype.removeSelectedAppointmentClass = function () {
      var selectedAppointments = this.getSelectedAppointments();

      for (var _i = 0, selectedAppointments_1 = selectedAppointments; _i < selectedAppointments_1.length; _i++) {
        var appointment = selectedAppointments_1[_i];
        appointment.setAttribute('aria-selected', 'false');
      }

      sf.base.removeClass(selectedAppointments, APPOINTMENT_BORDER);

      if (this.parent.options.currentView === 'Agenda' || this.parent.options.currentView === 'MonthAgenda') {
        sf.base.removeClass(selectedAppointments, AGENDA_SELECTED_CELL);
      }
    };

    EventBase.prototype.addSelectedAppointments = function (cells) {
      for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
        var cell = cells_1[_i];
        cell.setAttribute('aria-selected', 'true');
      }

      if (this.parent.options.currentView !== 'MonthAgenda') {
        this.parent.removeSelectedClass();
      }

      sf.base.addClass(cells, APPOINTMENT_BORDER);
    };

    EventBase.prototype.getSelectedAppointments = function () {
      return [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_BORDER + ',.' + APPOINTMENT_CLASS + ':focus'));
    }; // tslint:disable:max-line-length


    EventBase.prototype.focusElement = function () {
      var scheduleEditorDialog = document.querySelector('#' + this.parent.element.id + '_dialog_wrapper');

      if (scheduleEditorDialog && scheduleEditorDialog.classList.contains('e-popup-open')) {
        return;
      }

      var selectedCell = this.parent.getSelectedElements();

      if (selectedCell.length > 0) {
        if (this.parent.keyboardInteractionModule) {
          var target = !sf.base.isNullOrUndefined(this.parent.activeCellsData) && this.parent.activeCellsData.element || selectedCell[selectedCell.length - 1];
          this.parent.keyboardInteractionModule.selectCells(target instanceof Array, target);
        }

        return;
      }

      var selectedAppointments = this.getSelectedAppointments();

      if (selectedAppointments.length > 0) {
        selectedAppointments[selectedAppointments.length - 1].focus();
        return;
      }
    };

    return EventBase;
  }();
  /**
   * Schedule base class
   */


  var SfSchedule =
  /** @class */
  function () {
    // tslint:enable:no-any
    function SfSchedule(element, options, viewOptions, dotnetRef) {
      this.element = element;
      this.element.blazor__instance = this;
      this.dotNetRef = dotnetRef;
      this.options = options;
      this.activeViewOptions = viewOptions;
      this.isAdaptive = sf.base.Browser.isDevice;
      this.uiStateValues = {
        expand: false,
        isInitial: true,
        left: 0,
        top: 0,
        isGroupAdaptive: false,
        isIgnoreOccurrence: false,
        groupIndex: 0,
        action: false,
        isBlock: false
      };
      this.render();
    }

    SfSchedule.prototype.render = function () {
      var addClasses = [];
      var removeClasses = [];
      addClasses.push(ROOT);

      if (this.options.enableRtl) {
        addClasses.push(RTL);
      } else {
        removeClasses.push(RTL);
      }

      if (this.isAdaptive) {
        addClasses.push(DEVICE_CLASS);
      } else {
        removeClasses.push(DEVICE_CLASS);
      }

      if (this.options.cssClass) {
        addClasses.concat(this.options.cssClass.split(' '));
      }

      sf.base.classList(this.element, addClasses, removeClasses);
      this.setWidth();
      this.setHeight();
      this.workCellAction = new WorkCellInteraction(this);
      this.initializeLayout(this.options.currentView);
      this.eventBase = new EventBase(this);

      if (this.options.allowKeyboardInteraction) {
        this.keyboardInteractionModule = new KeyboardInteraction(this);
      } // this.inlineModule = new InlineEdit(this);
      // this.initializeDataModule();
      // this.initializeResources();


      this.wireEvents();
    };

    SfSchedule.prototype.initializeLayout = function (viewName) {
      if (this.activeView) {
        this.activeView.destroy();
      }

      switch (viewName) {
        case 'Day':
        case 'Week':
        case 'WorkWeek':
          this.activeView = new VerticalViews(this);
          break;

        case 'TimelineDay':
        case 'TimelineWorkWeek':
        case 'TimelineWeek':
          this.activeView = new TimelineViews(this);
          break;

        case 'Month':
          this.activeView = new Month(this);
          break;

        case 'MonthAgenda':
          this.activeView = new MonthAgenda(this);
          break;

        case 'TimelineMonth':
          this.activeView = new TimelineMonth(this);
          break;

        case 'Year':
        case 'TimelineYear':
          this.activeView = new Year(this);
          break;
      }

      if (!this.activeView) {
        return;
      }

      this.activeView.getRenderDates();
      this.activeView.renderLayout(); // this.parent.uiStateValues.isGroupAdaptive = this.parent.isAdaptive && this.parent.activeViewOptions.group.resources.length > 0 &&
      //     this.parent.activeViewOptions.group.enableCompactView;
      // if (this.parent.virtualScrollModule) {
      //     this.parent.virtualScrollModule = null;
      // }
      // if (this.parent.currentView.indexOf('Timeline') !== -1 && this.parent.activeViewOptions.allowVirtualScrolling
      //     && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
      //     this.parent.virtualScrollModule = new VirtualScroll(this.parent);
      //     this.parent.uiStateValues.top = 0;
      // }
    };

    SfSchedule.prototype.isTimelineView = function () {
      return this.options.currentView.indexOf('Timeline') !== -1;
    };

    SfSchedule.prototype.isAllDayCell = function (td) {
      if (['Month', 'TimelineMonth', 'TimelineYear', 'MonthAgenda'].indexOf(this.options.currentView) > -1 || td.classList.contains(ALLDAY_CELLS_CLASS) || td.classList.contains(HEADER_CELLS_CLASS) || !this.activeViewOptions.timeScale.enable) {
        return true;
      }

      if (this.isTimelineView() && this.activeViewOptions.headerRows.length > 0 && this.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {
        return true;
      }

      return false;
    };

    SfSchedule.prototype.getDateFromElement = function (td) {
      var dateString = td.getAttribute('data-date');

      if (!sf.base.isNullOrUndefined(dateString)) {
        var dateInMS = parseInt(dateString, 10);
        var date = new Date(dateInMS); // if (this.isServerRenderer()) {

        var localDate = new Date(+date + date.getTimezoneOffset() * 60000);
        return new Date(localDate.getTime() + (localDate.getTimezoneOffset() - date.getTimezoneOffset()) * 60000); // }
        // return date;
      }

      return undefined;
    };

    SfSchedule.prototype.getMsFromDate = function (date) {
      return new Date(+date - date.getTimezoneOffset() * 60000).getTime();
    };

    SfSchedule.prototype.getStartEndTime = function (startEndTime) {
      if (!sf.base.isNullOrUndefined(startEndTime) && startEndTime !== '') {
        var startEndDate = this.resetTime(this.getCurrentTime());
        var timeString = startEndTime.split(':');

        if (timeString.length === 2) {
          startEndDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0);
        }

        return startEndDate;
      }

      return null;
    };

    SfSchedule.prototype.resetTime = function (date) {
      return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    };

    SfSchedule.prototype.getCurrentTime = function () {
      // if (this.timezone) {
      //     let localOffset: number & string = new Date().getTimezoneOffset() as number & string;
      //     return this.tzModule.convert(new Date(), localOffset, this.timezone as number & string);
      // }
      return new Date();
    };

    SfSchedule.prototype.boundaryValidation = function (pageY, pageX) {
      var autoScrollDistance = 30;
      var scrollEdges = {
        left: false,
        right: false,
        top: false,
        bottom: false
      };
      var viewBoundaries = this.element.querySelector('.' + CONTENT_WRAP_CLASS).getBoundingClientRect();

      if (pageY < viewBoundaries.top + autoScrollDistance + window.pageYOffset && pageY > viewBoundaries.top + window.pageYOffset) {
        scrollEdges.top = true;
      }

      if (pageY > viewBoundaries.bottom - autoScrollDistance + window.pageYOffset && pageY < viewBoundaries.bottom + window.pageYOffset) {
        scrollEdges.bottom = true;
      }

      if (pageX < viewBoundaries.left + autoScrollDistance + window.pageXOffset && pageX > viewBoundaries.left + window.pageXOffset) {
        scrollEdges.left = true;
      }

      if (pageX > viewBoundaries.right - autoScrollDistance + window.pageXOffset && pageX < viewBoundaries.right + window.pageXOffset) {
        scrollEdges.right = true;
      }

      return scrollEdges;
    };

    SfSchedule.prototype.onCellMouseDown = function (e) {
      if (this.keyboardInteractionModule) {
        this.keyboardInteractionModule.onCellMouseDown(e);
      }
    };

    SfSchedule.prototype.getNavigateView = function () {
      if (this.isTimelineView()) {
        return this.options.currentView === 'TimelineMonth' || this.options.currentView === 'TimelineYear' ? 'TimelineDay' : 'Agenda';
      }

      return 'Day';
    };

    SfSchedule.prototype.addSelectedClass = function (cells, focusCell) {
      for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
        var cell = cells_1[_i];
        cell.setAttribute('aria-selected', 'true');
      }

      sf.base.addClass(cells, SELECTED_CELL_CLASS);

      if (focusCell) {
        focusCell.setAttribute('tabindex', '0');
        focusCell.focus();
      }
    };

    SfSchedule.prototype.removeSelectedClass = function () {
      var selectedCells = this.getSelectedElements();

      for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {
        var cell = selectedCells_1[_i];
        cell.setAttribute('aria-selected', 'false');
        cell.removeAttribute('tabindex');
      }

      sf.base.removeClass(selectedCells, SELECTED_CELL_CLASS);
    };

    SfSchedule.prototype.getCellDetails = function (tdCol) {
      var td = tdCol instanceof Array ? tdCol : [tdCol];
      var firstTd = sf.base.getElement(td[0]);
      var lastTd = sf.base.getElement(td.slice(-1)[0]);
      var startTime = this.getDateFromElement(firstTd);
      var endTime = this.getDateFromElement(lastTd);

      if (sf.base.isNullOrUndefined(startTime) || sf.base.isNullOrUndefined(endTime)) {
        return undefined;
      }

      var endDateFromColSpan = this.isTimelineView() && !sf.base.isNullOrUndefined(lastTd.getAttribute('colSpan')) && this.activeViewOptions.headerRows.length > 0;
      var duration = endDateFromColSpan ? parseInt(lastTd.getAttribute('colSpan'), 10) : 1;

      if (!this.activeViewOptions.timeScale.enable || endDateFromColSpan || lastTd.classList.contains(ALLDAY_CELLS_CLASS) || lastTd.classList.contains(HEADER_CELLS_CLASS)) {
        endTime = addDays(new Date(endTime.getTime()), duration);
      } else {
        endTime = this.activeView.getEndDateFromStartDate(endTime);
      }

      var data = {
        startTime: startTime,
        endTime: endTime,
        isAllDay: this.isAllDayCell(firstTd),
        element: firstTd
      };
      var groupIndex = firstTd.getAttribute('data-group-index');

      if (!sf.base.isNullOrUndefined(groupIndex)) {
        data.groupIndex = parseInt(groupIndex, 10);
      }

      return data;
    };

    SfSchedule.prototype.getSelectedElements = function () {
      return [].slice.call(this.element.querySelectorAll('.' + SELECTED_CELL_CLASS));
    };

    SfSchedule.prototype.selectCell = function (element) {
      this.removeSelectedClass();
      this.addSelectedClass([element], element);
    };

    SfSchedule.prototype.getAllDayRow = function () {
      return this.element.querySelector('.' + ALLDAY_ROW_CLASS);
    };

    SfSchedule.prototype.getTableRows = function () {
      return [].slice.call(this.element.querySelectorAll('.' + CONTENT_TABLE_CLASS + ' tbody tr:not(.' + HIDDEN_CLASS + ')'));
    };

    SfSchedule.prototype.getWorkCellElements = function () {
      return [].slice.call(this.element.querySelectorAll('.' + WORK_CELLS_CLASS));
    };

    SfSchedule.prototype.getContentTable = function () {
      return this.element.querySelector('.e-content-table tbody');
    };

    SfSchedule.prototype.getIndexOfDate = function (collection, date) {
      return collection.map(Number).indexOf(+date);
    };

    SfSchedule.prototype.setWidth = function () {
      this.element.style.width = sf.base.formatUnit(this.options.width);
    };

    SfSchedule.prototype.setHeight = function () {
      this.element.style.height = sf.base.formatUnit(this.options.height);
    };

    SfSchedule.prototype.setDimensions = function () {
      this.setWidth();
      this.setHeight();
      var data = {
        cssProperties: this.getCssProperties()
      };
      this.onScrollUiUpdate(data);
    };

    SfSchedule.prototype.getCssProperties = function () {
      var cssProps = {
        border: this.options.enableRtl ? 'borderLeftWidth' : 'borderRightWidth',
        padding: this.options.enableRtl ? 'paddingLeft' : 'paddingRight',
        rtlBorder: this.options.enableRtl ? 'borderRightWidth' : 'borderLeftWidth',
        rtlPadding: this.options.enableRtl ? 'paddingRight' : 'paddingLeft'
      };
      return cssProps;
    };

    SfSchedule.prototype.onScrollUiUpdate = function (args) {
      if (this.activeView) {
        this.activeView.onScrollUiUpdate(args);
      }
    };

    SfSchedule.prototype.onVirtualScroll = function () {
      if (this.virtualScrollModule) {
        this.virtualScrollModule.virtualScrolling();
      }
    };

    SfSchedule.prototype.removeNewEventElement = function () {
      var eventClone = this.element.querySelector('.e-new-event');

      if (!sf.base.isNullOrUndefined(eventClone)) {
        sf.base.remove(eventClone);
      }
    };

    SfSchedule.prototype.closeSidebar = function (e) {
      var sidebar = this.element.querySelector('.e-sidebar');

      if (sf.base.closest(e.target, '.e-icon-menu,.e-sidebar') && sidebar && sidebar.classList.contains('e-open')) {
        e.preventDefault();
        return;
      }
    };

    SfSchedule.prototype.closeHeaderPopup = function (e) {
      var closestEle = sf.base.closest(e.target, '.e-date-range,.e-header-popup,.e-day,.e-selected');
      var element = this.element.querySelector('.e-header-popup');

      if (!sf.base.isNullOrUndefined(closestEle)) {
        return;
      }

      if (element && this.headerPopup) {
        this.headerPopup.hide();
      }
    };

    SfSchedule.prototype.createCalendarPopup = function () {
      var headerPopupEle = this.element.querySelector('.e-header-popup');

      if (headerPopupEle && !this.headerPopup) {
        this.headerPopup = new sf.popups.Popup(headerPopupEle, {
          actionOnScroll: 'hide',
          targetType: 'relative',
          relateTo: this.isAdaptive ? this.element.querySelector('.e-schedule-toolbar') : this.element.querySelector('.e-date-range'),
          position: {
            X: 'left',
            Y: 'bottom'
          },
          enableRtl: this.options.enableRtl
        });
        this.headerPopup.isStringTemplate = true;
      }

      if (this.headerPopup) {
        if (this.headerPopup.element.classList.contains(POPUP_OPEN)) {
          this.headerPopup.hide();
        } else {
          this.headerPopup.show();
        }
      }
    };

    SfSchedule.prototype.createQuickPopup = function (guid) {
      var popupEle = this.element.querySelector('.e-quick-popup-wrapper');

      if (!sf.base.isNullOrUndefined(guid)) {
        this.currentCell = this.element.querySelector('.e-appointment[data-guid="' + guid + '"]');
      }

      var isWorkCell = this.currentCell.classList.contains(WORK_CELLS_CLASS) || this.currentCell.classList.contains(ALLDAY_CELLS_CLASS);

      if (isWorkCell) {
        this.selectCell(this.currentCell);
      }

      if (popupEle && !this.quickPopup) {
        this.quickPopup = new sf.popups.Popup(popupEle, {
          targetType: this.isAdaptive ? 'container' : 'relative',
          enableRtl: this.options.enableRtl,
          relateTo: this.currentCell,
          open: this.quickPopupOpen.bind(this),
          //close: this.quickPopupClose.bind(this),
          hideAnimation: this.isAdaptive ? {
            name: 'ZoomOut'
          } : {
            name: 'FadeOut',
            duration: 150
          },
          showAnimation: this.isAdaptive ? {
            name: 'ZoomIn'
          } : {
            name: 'FadeIn',
            duration: 150
          },
          collision: this.isAdaptive ? {
            X: 'fit',
            Y: 'fit'
          } : this.options.enableRtl ? {
            X: 'flip',
            Y: 'fit'
          } : {
            X: 'none',
            Y: 'fit'
          },
          position: this.isAdaptive || this.options.enableRtl ? {
            X: 'left',
            Y: 'top'
          } : {
            X: 'right',
            Y: 'top'
          },
          viewPortElement: this.isAdaptive ? document.body : this.element,
          zIndex: this.isAdaptive ? 1004 : 3
        });
        this.quickPopup.isStringTemplate = true;
      }

      if (this.quickPopup) {
        this.quickPopup.relateTo = this.currentCell;
        var isEventPopup = this.quickPopup.element.querySelector('.' + EVENT_POPUP_CLASS);
        var popupType = this.isAdaptive ? isEventPopup ? 'ViewEventInfo' : 'EditEventInfo' : 'QuickInfo';
        var eventProp = {
          type: popupType,
          cancel: false,
          data: null,
          target: null,
          element: null // tslint:disable:no-any
          // target: JSON.stringify((window as any).sfBlazor.getDomObject('popup', this.currentCell)),
          // element: JSON.stringify((window as any).sfBlazor.getDomObject('popup', this.quickPopup.element))
          // tslint:enable:no-any

        };
        this.dotNetRef.invokeMethodAsync('TriggerPopupEvent', eventProp);
      }
    };

    SfSchedule.prototype.quickPopupOpen = function () {
      if (this.isAdaptive) {
        this.quickPopup.element.style.top = '0px';
        return;
      }

      if (this.quickPopup.element.querySelector('.' + CELL_POPUP_CLASS)) {
        var subjectElement = this.quickPopup.element.querySelector('.' + SUBJECT_CLASS);

        if (subjectElement) {
          subjectElement.focus();
        }
      } else {
        var editElement = this.quickPopup.element.querySelector('.' + EDIT_EVENT_CLASS);

        if (editElement) {
          editElement.focus();
        }

        var editIcon = this.quickPopup.element.querySelector('.' + EDIT_CLASS);

        if (editIcon) {
          editIcon.focus();
        }
      }
    };

    SfSchedule.prototype.adjustPopupPosition = function () {
      var display = this.quickPopup.element.style.display;
      this.quickPopup.element.style.display = 'block';

      if (this.isAdaptive) {
        this.quickPopup.element.removeAttribute('style');
        this.quickPopup.element.style.display = 'block'; //this.quickPopup.element.style.height = formatUnit((popupType === 'EditEventInfo') ? 65 : window.innerHeight);
      } else {
        this.quickPopup.offsetX = 10;
        this.quickPopup.collision = {
          X: this.options.enableRtl ? 'flip' : 'none',
          Y: 'fit'
        };
        this.quickPopup.position = {
          X: this.options.enableRtl ? 'left' : 'right',
          Y: 'top'
        };
        this.quickPopup.dataBind();
        this.quickPopup.refreshPosition(null, true);
        var collide = sf.popups.isCollide(this.quickPopup.element, this.element);

        if (collide.indexOf(this.options.enableRtl ? 'left' : 'right') > -1) {
          this.quickPopup.offsetX = -this.currentCell.offsetWidth - 10 - this.quickPopup.element.offsetWidth;
          this.quickPopup.dataBind();
          var leftCollide = sf.popups.isCollide(this.quickPopup.element, this.element);

          if (leftCollide.indexOf('left') > -1) {
            this.quickPopup.position = {
              X: 'center',
              Y: 'center'
            };
            this.quickPopup.collision = {
              X: 'fit',
              Y: 'fit'
            };
            this.quickPopup.offsetX = -(this.quickPopup.element.offsetWidth / 2);
            this.quickPopup.dataBind();
          }
        } // if (this.parent.virtualScrollModule && (collide.indexOf('top') > -1 || collide.indexOf('bottom') > -1)) {
        //     let element: HTMLElement = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS + ' table');
        //     let translateY: number = util.getTranslateY(element);
        //     this.quickPopup.offsetY = translateY;
        //     this.quickPopup.dataBind();
        // }

      } // if (isEventPopup) {
      //     this.applyEventColor();
      // }


      this.quickPopup.element.style.display = display;
      this.quickPopup.dataBind();
      this.quickPopup.show();
    };

    SfSchedule.prototype.onQuickPopupClose = function () {
      if (this.quickPopup.element.classList.contains(POPUP_OPEN)) {
        this.quickPopup.hide();
      }
    };

    SfSchedule.prototype.onClosePopup = function () {
      //this.quickPopupHide();
      if (this.quickPopup) {
        this.quickPopup.hide();
      }

      this.eventBase.focusElement();
    };

    SfSchedule.prototype.createMoreEventPopup = function (clsName, dataDate) {
      var popupEle = this.element.querySelector('.e-more-popup-wrapper');

      if (popupEle && !this.morePopup) {
        this.morePopup = new sf.popups.Popup(popupEle, {
          targetType: this.isAdaptive ? 'container' : 'relative',
          enableRtl: this.options.enableRtl,
          hideAnimation: {
            name: 'ZoomOut',
            duration: 300
          },
          showAnimation: {
            name: 'ZoomIn',
            duration: 300
          },
          //open: this.morePopupOpen.bind(this),
          //close: this.morePopupClose.bind(this),
          collision: this.isAdaptive ? {
            X: 'fit',
            Y: 'fit'
          } : this.options.enableRtl ? {
            X: 'flip',
            Y: 'fit'
          } : {
            X: 'flip',
            Y: 'flip'
          },
          viewPortElement: this.isAdaptive ? document.body : this.element,
          zIndex: this.isAdaptive ? 1002 : 2
        });
        this.morePopup.isStringTemplate = true;
      }

      if (this.morePopup) {
        this.morePopup.relateTo = this.element.querySelector('.' + clsName + '[data-date=' + dataDate + ']');
        this.morePopup.show();
      }
    };

    SfSchedule.prototype.onMoreEventPopupClose = function () {
      if (this.morePopup && this.morePopup.element.classList.contains(POPUP_OPEN)) {
        this.onQuickPopupClose();
        this.morePopup.hide();
      }
    };

    SfSchedule.prototype.positionVerticalEvents = function (element) {
      var elementList = [].slice.call(element.getElementsByClassName('native-appointment'));
      var workcell = element.querySelector('.e-work-cells');

      if (!workcell) {
        return;
      }

      var cellHeight = workcell.getBoundingClientRect().height;
      var cellWidth = workcell.getBoundingClientRect().width;

      for (var i = 0; i < elementList.length; i++) {
        var ele = elementList[i];
        var blockSpace = ele.classList.contains('e-block-appointment') ? 0 : 10;
        var columnCount = this.getColumn(ele);
        var widthSize = cellWidth / this.getColumnCounts(ele);
        ele.style.top = this.getTopStartDuration(ele) / (this.activeViewOptions.timeScale.interval / this.activeViewOptions.timeScale.slotCount * 60000) * cellHeight + 'px';
        ele.style.left = widthSize * columnCount + 'px';
        ele.style.width = widthSize - blockSpace + 'px';
        ele.style.height = (this.getTopStartDuration(ele) + this.getDuration(ele)) / (this.activeViewOptions.timeScale.interval / this.activeViewOptions.timeScale.slotCount * 60000) * cellHeight - this.getTopStartDuration(ele) / (this.activeViewOptions.timeScale.interval / this.activeViewOptions.timeScale.slotCount * 60000) * cellHeight + 'px';
      }
    };

    SfSchedule.prototype.getDuration = function (ele) {
      return parseInt(ele.getAttribute('data-duration'), 10);
    };

    SfSchedule.prototype.getTopStartDuration = function (ele) {
      return parseInt(ele.getAttribute('data-top-start-duration'), 10);
    };

    SfSchedule.prototype.getColumnCounts = function (ele) {
      return parseInt(ele.getAttribute('data-columns-count'), 10);
    };

    SfSchedule.prototype.getColumn = function (ele) {
      return parseInt(ele.getAttribute('data-columns'), 10);
    };

    SfSchedule.prototype.styleAttribute = function (element) {
      if (!sf.base.isNullOrUndefined(element)) {
        var workCell = element.querySelector('.e-work-cells');
        var cellWidth = workCell.offsetWidth;
        var cellHeight = workCell.offsetHeight;
        var cellHeader = workCell.querySelector('.e-date-header').offsetHeight;
        var eventHeight = 22;
        var EVENT_GAP = 2;
        var spanCount;
        var leftValue;
        var rightValue;
        var top;
        var height;
        var width;
        var appointments = element.querySelectorAll(".e-appointment, .e-more-indicator");

        for (var i = 0; i < appointments.length; i++) {
          var ele = appointments[i];
          var cellData;
          var levelIndex = parseInt(ele.getAttribute('data-level'));

          if (element.blazor__instance.activeViewOptions.group.resources != null && element.blazor__instance.activeViewOptions.group.resources.length > 0 && !element.blazor__instance.uiStateValues.isGroupAdaptive) {
            cellData = element.querySelector('.e-work-cells' + '[data-date="' + ele.getAttribute('data-date') + '"]' + '[data-group-index="' + ele.getAttribute('data-group-index') + '"]');
          } else {
            cellData = element.querySelector('.e-work-cells' + '[data-date="' + ele.getAttribute('data-date') + '"]');
          }

          element.blazor__instance.options.enableRtl ? rightValue = cellData.cellIndex * cellWidth : leftValue = cellData.cellIndex * cellWidth;

          if (ele.classList.contains('e-appointment')) {
            top = cellData.offsetTop + cellHeader + eventHeight * levelIndex + EVENT_GAP;
            height = eventHeight;
            width = cellWidth;
          } else {
            top = cellData.offsetTop + (cellHeight - ele.offsetHeight);
            width = cellWidth;
          }

          ele.style.width = width + 'px';
          ele.style.height = height + 'px';
          ele.style.right = rightValue + 'px';
          ele.style.left = leftValue + 'px';
          ele.style.top = top + 'px';
        }
      }
    };

    SfSchedule.prototype.getTooltipPosition = function (fieldName) {
      var dlgContent = document.querySelector('#' + this.element.id + '_dialog_wrapper' + ' .e-dlg-content');
      var fieldEle = dlgContent.querySelector('#' + fieldName);
      var inputClient = fieldEle.getBoundingClientRect();
      var dlgClient = dlgContent.getBoundingClientRect();
      var toolTipPos = {
        fieldName: 'top:' + (inputClient.bottom - dlgClient.top + dlgContent.scrollTop + 9) + 'px;left:' + (inputClient.left - dlgClient.left + dlgContent.scrollLeft + inputClient.width / 2) + 'px;'
      };
      this.dotNetRef.invokeMethodAsync('ErrorPositioning', toolTipPos);
    };

    SfSchedule.prototype.scrollTo = function (hour, scrollDate) {
      if (this.activeView.scrollToDate && sf.base.isNullOrUndefined(hour) && scrollDate) {
        this.activeView.scrollToDate(scrollDate);
      } else if (this.activeView.scrollToHour) {
        this.activeView.scrollToHour(hour, scrollDate);
      }
    };

    SfSchedule.prototype.wireEvents = function () {
      this.wireTouchEvents();
      sf.base.EventHandler.add(window, 'resize', this.onScheduleResize, this);
      sf.base.EventHandler.add(window, 'orientationchange', this.onScheduleResize, this);
      sf.base.EventHandler.add(document, sf.base.Browser.touchStartEvent, this.onDocumentClick, this);
    };

    SfSchedule.prototype.unwireEvents = function () {
      this.unwireTouchEvents();
      sf.base.EventHandler.remove(window, 'resize', this.onScheduleResize);
      sf.base.EventHandler.remove(window, 'orientationchange', this.onScheduleResize);
      sf.base.EventHandler.remove(document, sf.base.Browser.touchStartEvent, this.onDocumentClick);
    };

    SfSchedule.prototype.wireTouchEvents = function () {
      var element = this.element.querySelector('.' + TABLE_CONTAINER_CLASS);

      if (element && sf.base.isNullOrUndefined(this.touchObj)) {
        this.touchObj = new sf.base.Touch(element, {
          tapHold: this.tapHoldHandler.bind(this)
        });
      }
    };

    SfSchedule.prototype.unwireTouchEvents = function () {
      if (this.touchObj) {
        this.touchObj.destroy();
      }
    };

    SfSchedule.prototype.tapHoldHandler = function (e) {
      var target = sf.base.closest(e.originalEvent.target, '.' + APPOINTMENT_CLASS);

      if (!sf.base.isNullOrUndefined(target) && this.isAdaptive) {
        //this.quickPopup.tapHoldEventPopup(e.originalEvent);
        return;
      }
    };

    SfSchedule.prototype.onScheduleResize = function () {
      this.onClosePopup();

      if (this.morePopup) {
        this.morePopup.hide();
      }

      if (this.options.currentView === 'Month' || !this.activeViewOptions.timeScale.enable || this.isTimelineView()) {
        this.activeView.resetColWidth(); // this.notify(events.scrollUiUpdate, { cssProperties: this.getCssProperties(), isPreventScrollUpdate: true });
        // this.notify(events.dataReady, {});
      }
    };

    SfSchedule.prototype.onDocumentClick = function (e) {
      this.closeHeaderPopup(e);
      this.closeSidebar(e); //this.notify(events.documentClick, { event: args });

      if (this.quickPopup) {
        this.quickPopup.hide();
      }

      if (this.morePopup) {
        this.morePopup.hide();
      }
    };

    SfSchedule.prototype.destroy = function () {
      this.isDestroyed = true;
      this.unwireEvents();
    };

    return SfSchedule;
  }(); // tslint:disable


  var Schedule = {
    initialize: function initialize(element, options, viewOptions, dotnetRef) {
      options.selectedDate = new Date(options.selectedDate);

      if (sf.base.isNullOrUndefined(viewOptions.group.resources)) {
        viewOptions.group.resources = [];
      }

      new SfSchedule(element, options, viewOptions, dotnetRef);
    },
    createCalendarPopup: function createCalendarPopup(element) {
      if (element && element.blazor__instance) {
        element.blazor__instance.createCalendarPopup();
      }
    },
    exportSave: function exportSave(fileName, fileType) {
      if (navigator.msSaveBlob) {
        //Download document in Edge browser
        var data = window.atob(fileType);
        var bytes = new Uint8Array(data.length);

        for (var i = 0; i < data.length; i++) {
          bytes[i] = data.charCodeAt(i);
        }

        var blob = new Blob([bytes.buffer], {
          type: 'application/octet-stream'
        });
        navigator.msSaveBlob(blob, fileName);
      } else {
        var link = document.createElement('a');
        link.download = fileName;
        link.href = 'data:application/octet-stream;base64,' + fileType;
        document.body.appendChild(link); // Needed for Firefox

        link.click();
        document.body.removeChild(link);
      }
    },
    exportToICS: function exportToICS(icsString, fileName) {
      var buffer = new Blob([icsString], {
        type: 'data:text/calendar;charset=utf8'
      });
      fileName = (fileName || 'Calendar') + '.ics';

      if (navigator.msSaveBlob) {
        navigator.msSaveBlob(buffer, fileName);
      } else {
        var downloadLink_1 = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
        downloadLink_1.download = fileName;
        downloadLink_1.href = URL.createObjectURL(buffer);
        var event_1 = document.createEvent('MouseEvent');
        event_1.initEvent('click', true, true);
        downloadLink_1.dispatchEvent(event_1);
        setTimeout(function () {
          URL.revokeObjectURL(downloadLink_1.href);
          downloadLink_1.href = undefined;
        });
      }
    },
    scrollTo: function scrollTo(element, hour, scrollDate) {
      if (element && element.blazor__instance) {
        element.blazor__instance.scrollTo(hour, scrollDate);
      }
    },
    destroy: function destroy(element) {
      if (element && element.blazor__instance) {
        element.blazor__instance.destroy();
      }
    },
    validation: function validation(element, fieldName) {
      if (element && element.blazor__instance) {
        element.blazor__instance.getTooltipPosition(fieldName);
      }
    },
    createQuickPopup: function createQuickPopup(element, guid) {
      if (element && element.blazor__instance) {
        element.blazor__instance.createQuickPopup(guid);
      }
    },
    adjustPopupPosition: function adjustPopupPosition(element) {
      if (element && element.blazor__instance) {
        element.blazor__instance.adjustPopupPosition();
      }
    },
    quickPopupClose: function quickPopupClose(element) {
      if (element && element.blazor__instance) {
        element.blazor__instance.onQuickPopupClose();
      }
    },
    createMoreEventPopup: function createMoreEventPopup(element, clsName, dataDate) {
      if (element && element.blazor__instance) {
        element.blazor__instance.createMoreEventPopup(clsName, dataDate);
      }
    },
    moreEventPopupClose: function moreEventPopupClose(element) {
      if (element && element.blazor__instance) {
        element.blazor__instance.onMoreEventPopupClose();
      }
    },
    getEventPositioned: function getEventPositioned(element) {
      if (element && element.blazor__instance) {
        element.blazor__instance.positionVerticalEvents(element);
      }
    },
    styleAttribute: function styleAttribute(element) {
      if (element && element.blazor__instance) {
        element.blazor__instance.styleAttribute(element);
      }
    }
  };
  return Schedule;
}();

/***/ })

}]);